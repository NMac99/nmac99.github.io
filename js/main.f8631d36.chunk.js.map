{"version":3,"sources":["icons/withIcon.tsx","icons/analyze/index.tsx","icons/arglasses/index.tsx","icons/cars/index.tsx","icons/dresscode/index.tsx","icons/github/index.tsx","icons/linkedin/index.tsx","icons/linux/index.tsx","icons/macos/index.tsx","icons/map/index.tsx","icons/music/index.tsx","icons/psychology/index.tsx","icons/quantum/index.tsx","icons/swift/index.tsx","icons/windows/index.tsx","icons/terminal/index.tsx","icons/office/index.tsx","icons/profile/index.tsx","icons/eyes/index.tsx","icons/magicman/index.tsx","icons/matrix/index.tsx","icons/vpn/index.tsx","icons/texttospeech/index.tsx","constants/user.tsx","elements/Sidebar/style.ts","components/SidebarCard/style.ts","components/SidebarCard/index.tsx","components/ReferenceLink/style.ts","components/ReferenceLink/index.tsx","components/LanguageBar/style.ts","components/LanguageBar/index.tsx","elements/Sidebar/index.tsx","components/MainbarCard/style.ts","components/MainbarCard/index.tsx","components/PieChart/index.tsx","components/ProjectLink/style.ts","components/ProjectLink/index.tsx","components/ToolExperience/style.ts","components/ToolExperience/index.tsx","components/Timeline/style.ts","components/Timeline/index.tsx","elements/Mainbar/index.tsx","pages/home.tsx","pages/NotFound.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["withIcon","Child","props","className","width","height","xmlns","viewBox","d","transform","id","fill","points","stroke","fillRule","personal","label","value","contact","type","rawValue","references","icon","style","fontSize","linkValue","hobbies","aboutMe","skills","os","swift","percent","key","name","experience","projectLink","education","order","entityTitle","entityDescription","startDate","Date","endDate","extra","gap","year","description","languages","spokenProgress","writtenProgress","advantages","tools","progress","ProgressWrapper","styled","div","ProfileImg","Profile","size","ReferenceWrapper","Space","CardWrapper","CardHeader","SidebarCard","title","children","toUpperCase","Wrapper","a","$inverted","$uppercase","ReferenceLink","inverted","uppercase","href","target","display","lineHeight","marginLeft","ProgressBar","$inversed","PureProgress","LanguageBar","wrap","textAlign","fontWeight","paddingBottom","span","gutter","align","flex","Sider","Layout","Sidebar","useState","collapsed","setCollapsed","useEffect","document","getElementById","classList","trigger","collapsible","padding","backgroundColor","background","selectable","theme","Item","onClick","val","color","justifyContent","alignItems","CaretRightOutlined","CaretLeftOutlined","strokeColor","trailColor","strokeWidth","showInfo","InfoCircleFilled","USER","map","item","borderBottom","opacity","MailFilled","direction","ref","SignalFilled","lang","StarFilled","hobby","MainbarCard","PieChart","data","canvasRef","useRef","canvas","current","ctx","getContext","globalStyles","window","getComputedStyle","body","colorGradient","Gradient","setGradient","getPropertyValue","setMidpoint","length","angleStep","Math","PI","previousAngle","sortedData","sort","item1","item2","i","deltaX","cos","deltaY","sin","segmentStartX","segmentStartY","beginPath","radius","positionInSortedData","findIndex","arc","lineTo","fillStyle","getColor","setTimeout","font","textMetrics","measureText","fillText","marginTop","marginBottom","ProjectLink","ToolExperience","count","defaultValue","character","whiteSpace","disabled","Container","TimelineSnippetStamp","TimelineFromNow","TimelineFromNowStamp","SnippetTitle","SnippetDescription","SnippetData","TimestampVacancy","monthDiff","dateFrom","dateTo","getMonth","getFullYear","Timeline","timelineMaxValue","setTimelineMaxValue","colors","timelineLengthByMonths","reduce","prev","cur","getArray","entity","array","round","position","vacancy","index","filter","flexDirection","Content","Mainbar","justify","marginRight","minHeight","paddingTop","flexWrap","Home","Video","video","NotFound","autoPlay","muted","loop","src","process","browserHistory","createBrowserHistory","App","history","exact","path","component","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","require","ReactDOM","render"],"mappings":"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","file":"static/js/main.f8631d36.chunk.js","sourcesContent":["import React, { CSSProperties, ReactElement } from 'react';\n\ntype Props = {\n  className?: string;\n  style?: CSSProperties;\n  onClick?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n};\n\n/* eslint-disable */\nexport default function withIcon(Child: any) {\n  /* eslint-enable */\n  return (props: Props): ReactElement => {\n    return (\n      <span {...props} className={`icon ${props?.className || ''}`}>\n        <Child width=\"1em\" height=\"1em\" />\n      </span>\n    );\n  };\n}\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Analyze = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"1em\"\n      width=\"1em\"\n      viewBox=\"0 0 121.7 122.88\"\n    >\n      <path d=\"M17.67,53.08h8.22l6.82-13.82L45.14,57.17l12.7-24.75,13.26,26,4.54-4.16,3-1.18H89.56v.53a35.81,35.81,0,0,1-1,8.35H80.35L68.5,72.84l-10.7-21L46.28,74.33,34,56.65,31.39,62H18.63a36.35,36.35,0,0,1-1-8.35v-.53ZM53.61,0A53.63,53.63,0,0,1,98.49,83l23.21,25.29-16,14.63L83.31,98.26A53.62,53.62,0,1,1,53.61,0Zm29.6,24a41.81,41.81,0,1,0,12.28,29.6A41.77,41.77,0,0,0,83.21,24Z\" />\n    </svg>\n  );\n};\n\nexport default withIcon(Analyze);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst ARGlasses = (): ReactElement => {\n  return (\n    <svg\n      height=\"1em\"\n      width=\"1em\"\n      viewBox=\"0 0 512.009 512.009\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g>\n        <path d=\"m511.183 237.09c2.795-8.383-1.736-17.444-10.119-20.239-8.387-2.795-17.444 1.737-20.238 10.12l-5.945 17.835c-21.012-18.354-52.655-28.801-87.92-28.834-.058 0-.112 0-.17 0-37.723 0-71.286 11.932-92.1 32.745-3.78 3.78-7.093 7.838-9.948 12.136-9.2-3.173-18.919-4.823-28.739-4.823-9.819 0-19.539 1.65-28.739 4.823-2.855-4.298-6.168-8.357-9.948-12.136-20.815-20.815-54.375-32.745-92.1-32.745-.056 0-.114 0-.17 0-35.265.033-66.908 10.48-87.92 28.834l-5.945-17.835c-2.793-8.383-11.854-12.912-20.238-10.12-8.383 2.794-12.914 11.855-10.119 20.239l12.575 37.725c-8.748 16.156-13.396 34.328-13.396 53.215 0 29.917 11.65 58.042 32.805 79.196 21.837 21.837 50.512 32.754 79.195 32.751 28.677-.002 57.364-10.919 79.195-32.751 21.958-21.957 38.479-49.348 45.328-75.15 3.869-14.576 4.648-28.536 2.466-41.402 5.47-1.739 11.21-2.644 17.011-2.644s11.541.905 17.011 2.644c-2.183 12.866-1.404 26.826 2.466 41.402 6.849 25.802 23.37 53.193 45.328 75.15 21.837 21.837 50.512 32.754 79.195 32.751 28.677-.002 57.364-10.919 79.195-32.751 21.154-21.154 32.805-49.28 32.805-79.196 0-18.888-4.649-37.059-13.396-53.215zm-423.179 42.941c-13.233 0-24 10.767-24 24 0 8.836-7.163 16-16 16s-16-7.164-16-16c0-30.878 25.121-56 56-56 8.837 0 16 7.164 16 16s-7.163 16-16 16zm272 0c-13.233 0-24 10.767-24 24 0 8.836-7.163 16-16 16s-16-7.164-16-16c0-30.878 25.121-56 56-56 8.837 0 16 7.164 16 16s-7.163 16-16 16z\" />\n        <path d=\"m349.217 122.815c-2.075 0-4.184-.406-6.216-1.264-27.537-11.625-56.808-17.52-86.997-17.52s-59.46 5.895-86.997 17.52c-8.139 3.437-17.526-.376-20.963-8.517s.376-17.526 8.518-20.963c31.497-13.297 64.954-20.04 99.442-20.04s67.945 6.742 99.442 20.04c8.142 3.437 11.954 12.822 8.518 20.963-2.579 6.108-8.508 9.78-14.747 9.781z\" />\n        <path d=\"m305.323 166.725c-1.418 0-2.859-.19-4.293-.588-14.579-4.052-29.729-6.106-45.025-6.106s-30.446 2.054-45.025 6.106c-8.513 2.364-17.334-2.618-19.7-11.132s2.618-17.333 11.132-19.7c17.37-4.827 35.401-7.274 53.594-7.274s36.224 2.447 53.594 7.274c8.514 2.366 13.498 11.186 11.132 19.7-1.97 7.08-8.402 11.72-15.409 11.72z\" />\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(ARGlasses);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Cars = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 99.088 99.087\"\n    >\n      <g>\n        <g>\n          <path\n            d=\"M15.078,51.768c-5.832,0-10.562,4.728-10.562,10.562c0,0.451,0.037,0.891,0.094,1.328\n\t\t\tc0.655,5.205,5.086,9.233,10.468,9.233c5.526,0,10.058-4.25,10.516-9.66c0.024-0.298,0.045-0.597,0.045-0.901\n\t\t\tC25.639,56.496,20.911,51.768,15.078,51.768z M11.107,59.339l1.617,1.618c-0.126,0.216-0.225,0.449-0.287,0.697h-2.28\n\t\t\tC10.274,60.792,10.605,60.002,11.107,59.339z M10.147,63.029h2.298c0.064,0.245,0.16,0.475,0.287,0.688l-1.621,1.621\n\t\t\tC10.609,64.675,10.27,63.889,10.147,63.029z M14.392,67.255c-0.859-0.12-1.641-0.457-2.301-0.956l1.611-1.611\n\t\t\tc0.213,0.125,0.445,0.215,0.689,0.277L14.392,67.255L14.392,67.255z M14.392,59.691c-0.251,0.063-0.483,0.164-0.701,0.292\n\t\t\tl-1.615-1.617c0.664-0.504,1.452-0.838,2.316-0.958V59.691z M15.766,57.409c0.864,0.12,1.653,0.454,2.316,0.959l-1.616,1.616\n\t\t\tc-0.216-0.128-0.451-0.229-0.7-0.292V57.409z M15.766,67.253v-2.288c0.244-0.062,0.475-0.155,0.688-0.279l1.612,1.612\n\t\t\tC17.406,66.797,16.623,67.133,15.766,67.253z M19.049,65.342l-1.626-1.627c0.128-0.214,0.23-0.44,0.295-0.687h2.28\n\t\t\tC19.875,63.887,19.552,64.683,19.049,65.342z M17.721,61.655c-0.063-0.249-0.162-0.481-0.287-0.697l1.618-1.618\n\t\t\tc0.5,0.664,0.831,1.452,0.949,2.315H17.721z\"\n          />\n          <path\n            d=\"M80.286,51.768c-5.831,0-10.562,4.728-10.562,10.562c0,0.451,0.037,0.891,0.095,1.328\n\t\t\tc0.655,5.205,5.085,9.233,10.467,9.233c5.527,0,10.06-4.25,10.517-9.66c0.023-0.298,0.045-0.597,0.045-0.901\n\t\t\tC90.848,56.496,86.12,51.768,80.286,51.768z M76.315,59.339l1.618,1.618c-0.127,0.216-0.226,0.449-0.289,0.697h-2.278\n\t\t\tC75.483,60.792,75.813,60.002,76.315,59.339z M75.356,63.029h2.298c0.062,0.245,0.16,0.475,0.287,0.688l-1.622,1.621\n\t\t\tC75.817,64.675,75.479,63.889,75.356,63.029z M79.6,67.255c-0.858-0.12-1.641-0.457-2.301-0.956l1.612-1.611\n\t\t\tc0.212,0.125,0.444,0.215,0.688,0.277V67.255L79.6,67.255z M79.6,59.691c-0.25,0.063-0.482,0.164-0.7,0.292l-1.615-1.617\n\t\t\tc0.664-0.504,1.452-0.838,2.315-0.958V59.691z M80.975,57.409c0.865,0.12,1.652,0.454,2.315,0.959l-1.614,1.616\n\t\t\tc-0.218-0.128-0.453-0.229-0.701-0.292V57.409z M80.975,67.253v-2.288c0.244-0.062,0.476-0.155,0.688-0.279l1.613,1.612\n\t\t\tC82.615,66.797,81.832,67.133,80.975,67.253z M84.258,65.342l-1.627-1.627c0.129-0.214,0.23-0.44,0.297-0.687h2.278\n\t\t\tC85.084,63.887,84.762,64.683,84.258,65.342z M82.93,61.655c-0.063-0.249-0.162-0.481-0.287-0.697l1.619-1.618\n\t\t\tc0.5,0.664,0.83,1.452,0.947,2.315H82.93z\"\n          />\n          <path\n            d=\"M75.914,26.198l-28.335,0.357c-0.85,0.01-1.53,0.708-1.519,1.558c0.009,0.837,0.688,1.509,1.52,1.519\n\t\t\tc0.014,0,0.025,0,0.038,0l28.335-0.357c0.85-0.01,1.53-0.708,1.52-1.558C77.461,26.867,76.74,26.166,75.914,26.198z\"\n          />\n          <path\n            d=\"M64.707,62.041H31.253c-0.85,0-1.538,0.689-1.538,1.539c0,0.851,0.688,1.539,1.538,1.539h33.454\n\t\t\tc0.85,0,1.538-0.688,1.538-1.539C66.245,62.73,65.557,62.041,64.707,62.041z\"\n          />\n          <path\n            d=\"M98.658,53.259c-0.357-0.436-0.895-0.688-1.458-0.688h-1.749l-1.777-19.458c-0.098-1.074-1.006-1.891-2.086-1.875\n\t\t\tl-50.028,0.75c-0.778,0.012-1.51,0.376-1.988,0.991l-6.631,8.523l-21.714,1.345c-1.181,0.074-2.262,0.689-2.926,1.668\n\t\t\tl-1.223,1.799c0,0-2.094,0.737-2.655,1.201c-0.487,0.403-1.456,2.069-1.456,2.069c-0.184,0.26-0.206,0.603-0.059,0.884\n\t\t\tc0.146,0.283,0.438,0.46,0.757,0.46v1.896H1.858C0.831,52.825,0,53.657,0,54.682v3.424c0,1.272,1.031,2.305,2.305,2.305H3.54\n\t\t\tl3.183-8.782c0.29-0.8,1.05-1.333,1.9-1.333h11.11c0.63,0,1.225,0.294,1.607,0.796l7.484,9.824h39.064l5.482-9.25\n\t\t\tc0.363-0.614,1.023-0.99,1.738-0.99h10.201c0.72,0,1.385,0.383,1.748,1.005l5.375,9.236h1.928c2.027,0,3.773-1.435,4.165-3.425\n\t\t\tl0.524-2.666C99.162,54.271,99.018,53.697,98.658,53.259z M51.068,43.467H39.54v-3.541h-2.335l3.494-4.613\n\t\t\tc0.15-0.199,0.384-0.317,0.633-0.321l11.694-0.174v5.108L51.068,43.467z M70.131,43.467H57.699v-8.719l14.993-0.223v6.38\n\t\t\tL70.131,43.467z M76.538,43.467v-9l12.907-0.192c0.22-0.003,0.402,0.166,0.419,0.385l0.606,8.807H76.538z\"\n          />\n        </g>\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Cars);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Dresscode = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 512.000000 512.000000\"\n    >\n      <g transform=\"translate(0.000000,512.000000) scale(0.100000,-0.100000)\">\n        <path\n          d=\"M1955 4946 c-11 -8 -42 -59 -69 -113 l-49 -100 -451 -128 c-248 -70\n-461 -134 -473 -141 -27 -17 -44 -75 -94 -319 -148 -724 -236 -1760 -255\n-3011 l-7 -442 26 -26 26 -26 260 0 260 0 -6 -55 c-5 -52 -4 -56 28 -86 52\n-49 190 -136 287 -181 186 -86 403 -139 652 -158 161 -13 323 -6 357 16 15 9\n34 51 64 144 24 71 46 130 49 130 3 0 25 -59 49 -130 30 -93 49 -135 64 -144\n33 -22 196 -29 357 -17 246 19 470 74 657 161 93 44 231 131 282 179 32 30 33\n34 28 86 l-6 55 260 0 260 0 24 25 25 24 0 218 c-1 790 -55 1769 -135 2448\n-63 525 -167 1068 -212 1105 -11 8 -224 73 -475 145 l-456 130 -49 99 c-26 54\n-57 104 -68 112 -16 12 -121 14 -605 14 -484 0 -589 -2 -605 -14z m1050 -173\nc-3 -16 -13 -52 -21 -80 l-15 -53 -409 0 -409 0 -15 53 c-8 28 -18 64 -21 80\nl-7 27 452 0 452 0 -7 -27z m-774 -1011 c153 -543 244 -883 240 -895 -5 -14\n-78 89 -310 437 l-304 456 72 108 c108 164 100 187 -84 233 -66 17 -121 32\n-123 34 -2 1 54 118 125 258 70 141 130 254 133 251 2 -3 116 -400 251 -882z\nm1167 373 c-2 -2 -57 -17 -123 -34 -184 -46 -192 -69 -84 -233 l72 -108 -322\n-483 c-178 -265 -320 -473 -317 -462 15 59 508 1812 512 1825 4 9 59 -91 135\n-244 72 -142 129 -260 127 -261z m-1768 185 c-60 -121 -110 -231 -110 -244 0\n-43 30 -66 115 -87 44 -11 97 -25 117 -30 l38 -10 -56 -84 c-43 -64 -55 -91\n-52 -112 2 -15 167 -271 365 -569 l361 -541 -44 -154 -44 -154 0 -615 0 -615\n77 -193 77 -193 -65 -197 c-62 -187 -66 -196 -95 -204 -46 -13 -337 10 -465\n36 -64 14 -152 37 -195 51 -182 62 -364 166 -364 208 0 26 49 451 56 485 l4\n22 301 0 300 0 24 25 c25 24 25 26 25 215 0 189 0 191 -25 215 l-24 25 -271 0\nc-250 0 -270 1 -270 18 0 9 25 226 56 482 l55 465 -231 888 c-128 489 -230\n889 -229 891 3 2 656 191 677 195 1 1 -47 -98 -108 -219z m2100 120 c179 -51\n327 -94 329 -96 1 -1 -101 -402 -229 -891 l-231 -888 55 -465 c31 -256 56\n-473 56 -482 0 -17 -20 -18 -270 -18 l-271 0 -24 -25 c-25 -24 -25 -26 -25\n-215 0 -189 0 -191 25 -215 l24 -25 300 0 301 0 4 -22 c7 -34 56 -459 56 -485\n0 -42 -187 -149 -364 -208 -44 -15 -132 -38 -195 -51 -127 -26 -418 -49 -465\n-36 -28 8 -33 18 -101 223 -40 117 -107 299 -149 404 l-76 189 0 581 0 580\n248 372 247 372 288 1 288 0 24 25 c16 15 25 36 25 55 0 19 -9 40 -25 55 l-24\n25 -231 0 c-126 0 -230 2 -230 5 0 3 79 123 175 268 111 165 175 271 175 287\n0 14 -25 62 -55 107 l-55 82 38 10 c20 5 73 19 117 30 85 21 115 44 115 87 0\n13 -50 124 -111 245 -61 122 -104 219 -97 217 7 -3 159 -47 338 -98z m-813 18\nc-29 -115 -353 -1258 -357 -1258 -4 0 -328 1143 -357 1258 l-5 22 362 0 362 0\n-5 -22z m-1748 -1173 l190 -730 -105 -869 c-57 -478 -104 -873 -104 -878 0 -4\n-97 -8 -217 -8 l-216 0 7 382 c17 990 71 1757 171 2453 47 323 66 425 76 400\n5 -11 94 -349 198 -750z m3021 579 c79 -459 140 -1067 175 -1739 17 -319 35\n-922 35 -1167 l0 -158 -215 0 c-118 0 -215 4 -215 8 0 5 -47 400 -104 878\nl-105 869 185 710 c102 390 190 727 195 749 6 21 12 36 14 34 3 -2 18 -85 35\n-184z m-2350 -2504 l0 -80 -236 0 -236 0 7 73 c4 39 9 75 12 80 2 4 105 7 229\n7 l224 0 0 -80z m1893 73 c3 -5 8 -41 12 -80 l7 -73 -236 0 -236 0 0 80 0 80\n224 0 c124 0 227 -3 229 -7z\"\n        />\n        <path\n          d=\"M2665 2055 c-70 -69 31 -182 103 -115 28 27 37 62 21 92 -28 53 -84\n64 -124 23z\"\n        />\n        <path\n          d=\"M2665 1415 c-50 -49 -15 -135 55 -135 41 0 80 39 80 80 0 41 -39 80\n-80 80 -19 0 -40 -9 -55 -25z\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Dresscode);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Github = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 438.536 438.536\"\n    >\n      <g>\n        <g>\n          <path\n            d=\"M158.173,352.599c-3.049,0.568-4.381,1.999-3.999,4.281c0.38,2.283,2.093,3.046,5.138,2.283\n\t\t\tc3.049-0.76,4.38-2.095,3.997-3.997C162.931,353.074,161.218,352.216,158.173,352.599z\"\n          />\n          <path\n            d=\"M141.898,354.885c-3.046,0-4.568,1.041-4.568,3.139c0,2.474,1.619,3.518,4.853,3.138c3.046,0,4.57-1.047,4.57-3.138\n\t\t\tC146.753,355.553,145.134,354.502,141.898,354.885z\"\n          />\n          <path\n            d=\"M119.629,354.022c-0.76,2.095,0.478,3.519,3.711,4.284c2.855,1.137,4.664,0.568,5.424-1.714\n\t\t\tc0.572-2.091-0.666-3.61-3.711-4.568C122.197,351.265,120.39,351.922,119.629,354.022z\"\n          />\n          <path\n            d=\"M414.41,24.123C398.326,8.042,378.964,0,356.309,0H82.225C59.577,0,40.208,8.042,24.123,24.123\n\t\t\tC8.042,40.207,0,59.576,0,82.225v274.088c0,22.65,8.042,42.017,24.123,58.098c16.084,16.084,35.454,24.126,58.102,24.126h63.953\n\t\t\tc4.184,0,7.327-0.144,9.42-0.424c2.092-0.288,4.184-1.526,6.279-3.717c2.096-2.187,3.14-5.376,3.14-9.562\n\t\t\tc0-0.568-0.05-7.046-0.144-19.417c-0.097-12.375-0.144-22.176-0.144-29.41l-6.567,1.143c-4.187,0.76-9.469,1.095-15.846,0.999\n\t\t\tc-6.374-0.096-12.99-0.76-19.841-1.998c-6.855-1.239-13.229-4.093-19.13-8.562c-5.898-4.477-10.085-10.328-12.56-17.559\n\t\t\tl-2.856-6.571c-1.903-4.373-4.899-9.229-8.992-14.554c-4.093-5.332-8.232-8.949-12.419-10.852l-1.999-1.428\n\t\t\tc-1.331-0.951-2.568-2.098-3.711-3.429c-1.141-1.335-1.997-2.669-2.568-3.997c-0.571-1.335-0.097-2.43,1.427-3.289\n\t\t\tc1.524-0.855,4.281-1.279,8.28-1.279l5.708,0.855c3.808,0.76,8.516,3.042,14.134,6.851c5.614,3.806,10.229,8.754,13.846,14.843\n\t\t\tc4.38,7.806,9.657,13.75,15.846,17.843c6.184,4.097,12.419,6.143,18.699,6.143s11.704-0.476,16.274-1.424\n\t\t\tc4.565-0.954,8.848-2.385,12.847-4.288c1.713-12.751,6.377-22.559,13.988-29.41c-10.848-1.143-20.602-2.854-29.265-5.14\n\t\t\tc-8.658-2.286-17.605-5.995-26.835-11.136c-9.234-5.14-16.894-11.512-22.985-19.13c-6.09-7.618-11.088-17.61-14.987-29.978\n\t\t\tc-3.901-12.375-5.852-26.652-5.852-42.829c0-23.029,7.521-42.637,22.557-58.814c-7.044-17.32-6.379-36.732,1.997-58.242\n\t\t\tc5.52-1.714,13.706-0.428,24.554,3.855c10.85,4.286,18.794,7.951,23.84,10.992c5.046,3.042,9.089,5.614,12.135,7.71\n\t\t\tc17.705-4.949,35.976-7.423,54.818-7.423c18.841,0,37.115,2.474,54.821,7.423l10.849-6.852c7.426-4.57,16.18-8.757,26.269-12.562\n\t\t\tc10.088-3.806,17.795-4.854,23.127-3.14c8.562,21.51,9.328,40.922,2.279,58.241c15.036,16.179,22.559,35.786,22.559,58.815\n\t\t\tc0,16.18-1.951,30.505-5.852,42.969c-3.898,12.467-8.939,22.463-15.13,29.981c-6.184,7.519-13.894,13.843-23.124,18.986\n\t\t\tc-9.232,5.137-18.178,8.853-26.84,11.132c-8.661,2.286-18.414,4.004-29.263,5.147c9.891,8.562,14.839,22.072,14.839,40.538v68.238\n\t\t\tc0,3.237,0.472,5.852,1.424,7.851c0.958,1.998,2.478,3.374,4.571,4.141c2.102,0.76,3.949,1.235,5.571,1.424\n\t\t\tc1.622,0.191,3.949,0.287,6.995,0.287h63.953c22.648,0,42.018-8.042,58.095-24.126c16.084-16.084,24.126-35.454,24.126-58.102\n\t\t\tV82.225C438.533,59.576,430.491,40.204,414.41,24.123z\"\n          />\n          <path\n            d=\"M86.793,319.195c-1.331,0.948-1.141,2.471,0.572,4.565c1.906,1.902,3.427,2.189,4.57,0.855\n\t\t\tc1.331-0.948,1.141-2.471-0.575-4.569C89.458,318.336,87.936,318.049,86.793,319.195z\"\n          />\n          <path\n            d=\"M77.374,312.057c-0.57,1.335,0.096,2.478,1.999,3.426c1.521,0.955,2.762,0.767,3.711-0.568\n\t\t\tc0.57-1.335-0.096-2.478-1.999-3.433C79.182,310.91,77.945,311.102,77.374,312.057z\"\n          />\n          <path\n            d=\"M95.646,330.331c-1.715,0.948-1.715,2.666,0,5.137c1.713,2.478,3.328,3.142,4.853,1.998c1.714-1.334,1.714-3.142,0-5.427\n\t\t\tC98.978,329.571,97.359,328.993,95.646,330.331z\"\n          />\n          <path\n            d=\"M105.641,343.174c-1.714,1.526-1.336,3.327,1.142,5.428c2.281,2.279,4.185,2.566,5.708,0.849\n\t\t\tc1.524-1.519,1.143-3.326-1.142-5.42C109.068,341.751,107.164,341.463,105.641,343.174z\"\n          />\n        </g>\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Github);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst LinkedIn = (): ReactElement => {\n  return (\n    <svg\n      height=\"1em\"\n      width=\"1em\"\n      viewBox=\"0 0 512 512\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"m475.074219 0h-438.148438c-20.394531 0-36.925781 16.53125-36.925781 36.925781v438.148438c0 20.394531 16.53125 36.925781 36.925781 36.925781h438.148438c20.394531 0 36.925781-16.53125 36.925781-36.925781v-438.148438c0-20.394531-16.53125-36.925781-36.925781-36.925781zm-293.464844 387h-62.347656v-187.574219h62.347656zm-31.171875-213.1875h-.40625c-20.921875 0-34.453125-14.402344-34.453125-32.402344 0-18.40625 13.945313-32.410156 35.273437-32.410156 21.328126 0 34.453126 14.003906 34.859376 32.410156 0 18-13.53125 32.402344-35.273438 32.402344zm255.984375 213.1875h-62.339844v-100.347656c0-25.21875-9.027343-42.417969-31.585937-42.417969-17.222656 0-27.480469 11.601563-31.988282 22.800781-1.648437 4.007813-2.050781 9.609375-2.050781 15.214844v104.75h-62.34375s.816407-169.976562 0-187.574219h62.34375v26.558594c8.285157-12.78125 23.109375-30.960937 56.1875-30.960937 41.019531 0 71.777344 26.808593 71.777344 84.421874zm0 0\" />\n    </svg>\n  );\n};\n\nexport default withIcon(LinkedIn);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Linux = (): ReactElement => {\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 304.998 304.998\"\n    >\n      <g id=\"XMLID_91_\">\n        <path\n          id=\"XMLID_92_\"\n          d=\"M274.659,244.888c-8.944-3.663-12.77-8.524-12.4-15.777c0.381-8.466-4.422-14.667-6.703-17.117\n\t\tc1.378-5.264,5.405-23.474,0.004-39.291c-5.804-16.93-23.524-42.787-41.808-68.204c-7.485-10.438-7.839-21.784-8.248-34.922\n\t\tc-0.392-12.531-0.834-26.735-7.822-42.525C190.084,9.859,174.838,0,155.851,0c-11.295,0-22.889,3.53-31.811,9.684\n\t\tc-18.27,12.609-15.855,40.1-14.257,58.291c0.219,2.491,0.425,4.844,0.545,6.853c1.064,17.816,0.096,27.206-1.17,30.06\n\t\tc-0.819,1.865-4.851,7.173-9.118,12.793c-4.413,5.812-9.416,12.4-13.517,18.539c-4.893,7.387-8.843,18.678-12.663,29.597\n\t\tc-2.795,7.99-5.435,15.537-8.005,20.047c-4.871,8.676-3.659,16.766-2.647,20.505c-1.844,1.281-4.508,3.803-6.757,8.557\n\t\tc-2.718,5.8-8.233,8.917-19.701,11.122c-5.27,1.078-8.904,3.294-10.804,6.586c-2.765,4.791-1.259,10.811,0.115,14.925\n\t\tc2.03,6.048,0.765,9.876-1.535,16.826c-0.53,1.604-1.131,3.42-1.74,5.423c-0.959,3.161-0.613,6.035,1.026,8.542\n\t\tc4.331,6.621,16.969,8.956,29.979,10.492c7.768,0.922,16.27,4.029,24.493,7.035c8.057,2.944,16.388,5.989,23.961,6.913\n\t\tc1.151,0.145,2.291,0.218,3.39,0.218c11.434,0,16.6-7.587,18.238-10.704c4.107-0.838,18.272-3.522,32.871-3.882\n\t\tc14.576-0.416,28.679,2.462,32.674,3.357c1.256,2.404,4.567,7.895,9.845,10.724c2.901,1.586,6.938,2.495,11.073,2.495\n\t\tc0.001,0,0,0,0.001,0c4.416,0,12.817-1.044,19.466-8.039c6.632-7.028,23.202-16,35.302-22.551c2.7-1.462,5.226-2.83,7.441-4.065\n\t\tc6.797-3.768,10.506-9.152,10.175-14.771C282.445,250.905,279.356,246.811,274.659,244.888z M124.189,243.535\n\t\tc-0.846-5.96-8.513-11.871-17.392-18.715c-7.26-5.597-15.489-11.94-17.756-17.312c-4.685-11.082-0.992-30.568,5.447-40.602\n\t\tc3.182-5.024,5.781-12.643,8.295-20.011c2.714-7.956,5.521-16.182,8.66-19.783c4.971-5.622,9.565-16.561,10.379-25.182\n\t\tc4.655,4.444,11.876,10.083,18.547,10.083c1.027,0,2.024-0.134,2.977-0.403c4.564-1.318,11.277-5.197,17.769-8.947\n\t\tc5.597-3.234,12.499-7.222,15.096-7.585c4.453,6.394,30.328,63.655,32.972,82.044c2.092,14.55-0.118,26.578-1.229,31.289\n\t\tc-0.894-0.122-1.96-0.221-3.08-0.221c-7.207,0-9.115,3.934-9.612,6.283c-1.278,6.103-1.413,25.618-1.427,30.003\n\t\tc-2.606,3.311-15.785,18.903-34.706,21.706c-7.707,1.12-14.904,1.688-21.39,1.688c-5.544,0-9.082-0.428-10.551-0.651l-9.508-10.879\n\t\tC121.429,254.489,125.177,250.583,124.189,243.535z M136.254,64.149c-0.297,0.128-0.589,0.265-0.876,0.411\n\t\tc-0.029-0.644-0.096-1.297-0.199-1.952c-1.038-5.975-5-10.312-9.419-10.312c-0.327,0-0.656,0.025-1.017,0.08\n\t\tc-2.629,0.438-4.691,2.413-5.821,5.213c0.991-6.144,4.472-10.693,8.602-10.693c4.85,0,8.947,6.536,8.947,14.272\n\t\tC136.471,62.143,136.4,63.113,136.254,64.149z M173.94,68.756c0.444-1.414,0.684-2.944,0.684-4.532\n\t\tc0-7.014-4.45-12.509-10.131-12.509c-5.552,0-10.069,5.611-10.069,12.509c0,0.47,0.023,0.941,0.067,1.411\n\t\tc-0.294-0.113-0.581-0.223-0.861-0.329c-0.639-1.935-0.962-3.954-0.962-6.015c0-8.387,5.36-15.211,11.95-15.211\n\t\tc6.589,0,11.95,6.824,11.95,15.211C176.568,62.78,175.605,66.11,173.94,68.756z M169.081,85.08\n\t\tc-0.095,0.424-0.297,0.612-2.531,1.774c-1.128,0.587-2.532,1.318-4.289,2.388l-1.174,0.711c-4.718,2.86-15.765,9.559-18.764,9.952\n\t\tc-2.037,0.274-3.297-0.516-6.13-2.441c-0.639-0.435-1.319-0.897-2.044-1.362c-5.107-3.351-8.392-7.042-8.763-8.485\n\t\tc1.665-1.287,5.792-4.508,7.905-6.415c4.289-3.988,8.605-6.668,10.741-6.668c0.113,0,0.215,0.008,0.321,0.028\n\t\tc2.51,0.443,8.701,2.914,13.223,4.718c2.09,0.834,3.895,1.554,5.165,2.01C166.742,82.664,168.828,84.422,169.081,85.08z\n\t\t M205.028,271.45c2.257-10.181,4.857-24.031,4.436-32.196c-0.097-1.855-0.261-3.874-0.42-5.826\n\t\tc-0.297-3.65-0.738-9.075-0.283-10.684c0.09-0.042,0.19-0.078,0.301-0.109c0.019,4.668,1.033,13.979,8.479,17.226\n\t\tc2.219,0.968,4.755,1.458,7.537,1.458c7.459,0,15.735-3.659,19.125-7.049c1.996-1.996,3.675-4.438,4.851-6.372\n\t\tc0.257,0.753,0.415,1.737,0.332,3.005c-0.443,6.885,2.903,16.019,9.271,19.385l0.927,0.487c2.268,1.19,8.292,4.353,8.389,5.853\n\t\tc-0.001,0.001-0.051,0.177-0.387,0.489c-1.509,1.379-6.82,4.091-11.956,6.714c-9.111,4.652-19.438,9.925-24.076,14.803\n\t\tc-6.53,6.872-13.916,11.488-18.376,11.488c-0.537,0-1.026-0.068-1.461-0.206C206.873,288.406,202.886,281.417,205.028,271.45z\n\t\t M39.917,245.477c-0.494-2.312-0.884-4.137-0.465-5.905c0.304-1.31,6.771-2.714,9.533-3.313c3.883-0.843,7.899-1.714,10.525-3.308\n\t\tc3.551-2.151,5.474-6.118,7.17-9.618c1.228-2.531,2.496-5.148,4.005-6.007c0.085-0.05,0.215-0.108,0.463-0.108\n\t\tc2.827,0,8.759,5.943,12.177,11.262c0.867,1.341,2.473,4.028,4.331,7.139c5.557,9.298,13.166,22.033,17.14,26.301\n\t\tc3.581,3.837,9.378,11.214,7.952,17.541c-1.044,4.909-6.602,8.901-7.913,9.784c-0.476,0.108-1.065,0.163-1.758,0.163\n\t\tc-7.606,0-22.662-6.328-30.751-9.728l-1.197-0.503c-4.517-1.894-11.891-3.087-19.022-4.241c-5.674-0.919-13.444-2.176-14.732-3.312\n\t\tc-1.044-1.171,0.167-4.978,1.235-8.337c0.769-2.414,1.563-4.91,1.998-7.523C41.225,251.596,40.499,248.203,39.917,245.477z\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Linux);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst MacOs = (): ReactElement => {\n  return (\n    <svg\n      height=\"1em\"\n      width=\"1em\"\n      viewBox=\"0 0 42 42\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"m23.091 14.018v-0.342l-1.063 0.073c-0.301 0.019-0.527 0.083-0.679 0.191-0.152 0.109-0.228 0.26-0.228 0.453 0 0.188 0.075 0.338 0.226 0.449 0.15 0.112 0.352 0.167 0.604 0.167 0.161 0 0.312-0.025 0.451-0.074s0.261-0.118 0.363-0.206c0.102-0.087 0.182-0.191 0.239-0.312 0.058-0.121 0.087-0.254 0.087-0.399zm-2.091-13.768c-11.579 0-20.75 9.171-20.75 20.75 0 11.58 9.171 20.75 20.75 20.75s20.75-9.17 20.75-20.75c0-11.579-9.17-20.75-20.75-20.75zm4.028 12.299c0.098-0.275 0.236-0.511 0.415-0.707s0.394-0.347 0.646-0.453 0.533-0.159 0.842-0.159c0.279 0 0.531 0.042 0.755 0.125 0.225 0.083 0.417 0.195 0.578 0.336s0.289 0.305 0.383 0.493 0.15 0.387 0.169 0.596h-0.833c-0.021-0.115-0.059-0.223-0.113-0.322s-0.125-0.185-0.213-0.258c-0.089-0.073-0.193-0.13-0.312-0.171-0.12-0.042-0.254-0.062-0.405-0.062-0.177 0-0.338 0.036-0.481 0.107-0.144 0.071-0.267 0.172-0.369 0.302s-0.181 0.289-0.237 0.475c-0.057 0.187-0.085 0.394-0.085 0.622 0 0.236 0.028 0.448 0.085 0.634 0.056 0.187 0.136 0.344 0.24 0.473 0.103 0.129 0.228 0.228 0.373 0.296s0.305 0.103 0.479 0.103c0.285 0 0.517-0.067 0.697-0.201s0.296-0.33 0.35-0.588h0.834c-0.024 0.228-0.087 0.436-0.189 0.624s-0.234 0.348-0.396 0.481c-0.163 0.133-0.354 0.236-0.574 0.308s-0.462 0.109-0.725 0.109c-0.312 0-0.593-0.052-0.846-0.155-0.252-0.103-0.469-0.252-0.649-0.445s-0.319-0.428-0.417-0.705-0.147-0.588-0.147-0.935c-2e-3 -0.339 0.047-0.647 0.145-0.923zm-11.853-1.262h0.834v0.741h0.016c0.051-0.123 0.118-0.234 0.2-0.33 0.082-0.097 0.176-0.179 0.284-0.248 0.107-0.069 0.226-0.121 0.354-0.157 0.129-0.036 0.265-0.054 0.407-0.054 0.306 0 0.565 0.073 0.775 0.219 0.211 0.146 0.361 0.356 0.449 0.63h0.021c0.056-0.132 0.13-0.25 0.221-0.354s0.196-0.194 0.314-0.268 0.248-0.13 0.389-0.169 0.289-0.058 0.445-0.058c0.215 0 0.41 0.034 0.586 0.103s0.326 0.165 0.451 0.29 0.221 0.277 0.288 0.455 0.101 0.376 0.101 0.594v2.981h-0.87v-2.772c0-0.287-0.074-0.51-0.222-0.667-0.147-0.157-0.358-0.236-0.632-0.236-0.134 0-0.257 0.024-0.369 0.071-0.111 0.047-0.208 0.113-0.288 0.198-0.081 0.084-0.144 0.186-0.189 0.304-0.046 0.118-0.069 0.247-0.069 0.387v2.715h-0.858v-2.844c0-0.126-0.02-0.24-0.059-0.342s-0.094-0.189-0.167-0.262c-0.072-0.073-0.161-0.128-0.264-0.167-0.104-0.039-0.22-0.059-0.349-0.059-0.134 0-0.258 0.025-0.373 0.075-0.114 0.05-0.212 0.119-0.294 0.207-0.082 0.089-0.146 0.193-0.191 0.314-0.044 0.12-0.116 0.252-0.116 0.394v2.683h-0.825v-4.374zm1.893 20.939c-3.825 0-6.224-2.658-6.224-6.9s2.399-6.909 6.224-6.909 6.215 2.667 6.215 6.909c0 4.241-2.39 6.9-6.215 6.9zm7.082-16.575c-0.141 0.036-0.285 0.054-0.433 0.054-0.218 0-0.417-0.031-0.598-0.093-0.182-0.062-0.337-0.149-0.467-0.262s-0.232-0.249-0.304-0.409c-0.073-0.16-0.109-0.338-0.109-0.534 0-0.384 0.143-0.684 0.429-0.9s0.7-0.342 1.243-0.377l1.18-0.068v-0.338c0-0.252-0.08-0.445-0.24-0.576s-0.386-0.197-0.679-0.197c-0.118 0-0.229 0.015-0.331 0.044-0.102 0.03-0.192 0.072-0.27 0.127s-0.143 0.121-0.193 0.198c-0.051 0.076-0.086 0.162-0.105 0.256h-0.818c5e-3 -0.193 0.053-0.372 0.143-0.536s0.212-0.306 0.367-0.427 0.336-0.215 0.546-0.282 0.438-0.101 0.685-0.101c0.266 0 0.507 0.033 0.723 0.101s0.401 0.163 0.554 0.288 0.271 0.275 0.354 0.451 0.125 0.373 0.125 0.59v3.001h-0.833v-0.729h-0.021c-0.062 0.118-0.14 0.225-0.235 0.32-0.096 0.095-0.203 0.177-0.322 0.244-0.12 0.067-0.25 0.119-0.391 0.155zm5.503 16.575c-2.917 0-4.9-1.528-5.038-3.927h1.899c0.148 1.371 1.473 2.279 3.288 2.279 1.741 0 2.992-0.908 2.992-2.149 0-1.074-0.76-1.723-2.519-2.167l-1.714-0.426c-2.464-0.611-3.584-1.732-3.584-3.575 0-2.269 1.982-3.844 4.807-3.844 2.76 0 4.686 1.584 4.76 3.862h-1.88c-0.13-1.371-1.25-2.214-2.918-2.214-1.658 0-2.806 0.852-2.806 2.084 0 0.972 0.722 1.547 2.482 1.991l1.445 0.361c2.751 0.667 3.881 1.751 3.881 3.696-1e-3 2.482-1.964 4.029-5.095 4.029zm-12.585-12.106c-2.621 0-4.26 2.01-4.26 5.205 0 3.186 1.639 5.196 4.26 5.196 2.612 0 4.26-2.01 4.26-5.196 1e-3 -3.195-1.648-5.205-4.26-5.205z\" />\n    </svg>\n  );\n};\n\nexport default withIcon(MacOs);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Map = (): ReactElement => {\n  return (\n    <svg\n      height=\"1em\"\n      width=\"1em\"\n      viewBox=\"0 0 512.014 512.014\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"m80.905 249.286c-44.558 0-80.809 36.25-80.809 80.809 0 23.109 12.161 50.183 36.146 80.468 17.033 21.509 33.901 36.808 34.611 37.449l10.052 9.075 10.052-9.075c.71-.641 17.578-15.94 34.611-37.449 23.984-30.286 36.146-57.359 36.146-80.468 0-44.558-36.251-80.809-80.809-80.809zm0 104.512c-13.07 0-23.704-10.633-23.704-23.704s10.634-23.704 23.704-23.704 23.704 10.634 23.704 23.704-10.633 23.704-23.704 23.704z\" />\n      <path d=\"m386.09 173.499h30v-76.441h95.827l-23.815-48.529 23.815-48.529h-125.827z\" />\n      <path d=\"m381.506 322.915h-87.172c-27.175 0-49.282-22.108-49.282-49.282s22.107-49.282 49.282-49.282h92.317c3.75 3.611 8.835 5.845 14.439 5.845 11.494 0 20.845-9.351 20.845-20.845s-9.351-20.845-20.845-20.845c-5.604 0-10.689 2.234-14.439 5.845h-92.317c-43.717 0-79.282 35.565-79.282 79.282s35.565 79.282 79.282 79.282h87.172c33.98 0 61.626 27.646 61.626 61.627s-27.646 61.626-61.626 61.626h-286.161c-3.75-3.611-8.835-5.845-14.439-5.845-11.494 0-20.845 9.351-20.845 20.845s9.351 20.845 20.845 20.845c5.604 0 10.689-2.234 14.439-5.845h286.161c50.522 0 91.626-41.104 91.626-91.627 0-50.522-41.104-91.626-91.626-91.626z\" />\n    </svg>\n  );\n};\n\nexport default withIcon(Map);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Music = (): ReactElement => {\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 477.867 477.867\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g>\n        <g>\n          <path\n            d=\"M238.933,0C106.974,0,0,106.974,0,238.933s106.974,238.933,238.933,238.933s238.933-106.974,238.933-238.933\n\t\t\tC477.726,107.033,370.834,0.141,238.933,0z M339.557,246.546c-1.654,3.318-4.343,6.008-7.662,7.662v0.085L195.362,322.56\n\t\t\tc-8.432,4.213-18.682,0.794-22.896-7.638c-1.198-2.397-1.815-5.043-1.8-7.722V170.667c-0.004-9.426,7.633-17.07,17.059-17.075\n\t\t\tc2.651-0.001,5.266,0.615,7.637,1.8l136.533,68.267C340.331,227.863,343.762,238.11,339.557,246.546z\"\n          />\n        </g>\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Music);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Psychology = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 512.000000 512.000000\"\n    >\n      <g transform=\"translate(0.000000,512.000000) scale(0.100000,-0.100000)\">\n        <path\n          d=\"M2023 5105 c-338 -43 -673 -180 -947 -388 -104 -78 -284 -259 -362\n-362 -393 -519 -506 -1182 -305 -1794 53 -161 118 -294 249 -508 354 -579 518\n-1112 548 -1783 8 -181 20 -217 84 -250 38 -20 57 -20 820 -20 763 0 782 0\n820 20 50 25 75 74 84 158 9 94 33 165 77 232 67 100 172 174 280 199 25 6\n191 11 382 11 319 0 340 1 377 20 26 13 47 34 60 60 19 37 20 58 20 355 l0\n315 -240 0 c-222 0 -244 2 -280 20 -45 23 -80 80 -80 130 0 50 35 107 80 130\n36 18 58 20 292 20 l253 0 30 58 c73 140 237 242 392 242 75 0 153 76 153 149\n0 18 -7 46 -17 64 -9 18 -144 229 -300 469 l-283 437 0 172 c0 143 -4 192 -25\n294 -100 497 -403 942 -840 1235 -103 69 -296 168 -410 209 -110 40 -259 78\n-380 97 -136 21 -400 26 -532 9z m607 -905 c65 -33 74 -62 80 -241 l5 -156\n130 73 c109 63 136 74 176 74 83 0 97 -16 276 -325 89 -154 165 -295 169 -313\n9 -46 -11 -106 -44 -134 -15 -13 -78 -52 -140 -88 -62 -35 -112 -67 -112 -70\n0 -3 50 -35 112 -70 62 -36 125 -75 140 -88 33 -28 53 -88 44 -134 -4 -18 -80\n-159 -169 -313 -179 -309 -193 -325 -276 -325 -40 0 -67 11 -176 74 l-130 73\n-5 -156 c-6 -179 -15 -208 -80 -241 -37 -19 -58 -20 -370 -20 -312 0 -333 1\n-370 20 -65 33 -74 62 -80 241 l-5 156 -130 -73 c-109 -63 -136 -74 -176 -74\n-83 0 -97 16 -276 325 -89 154 -165 295 -169 313 -9 46 11 106 44 134 15 13\n78 52 140 88 62 35 112 67 112 70 0 3 -50 35 -112 70 -62 36 -125 75 -140 88\n-33 28 -53 88 -44 134 4 18 80 159 169 313 179 309 193 325 276 325 40 0 67\n-11 176 -74 l130 -73 5 156 c6 178 15 208 78 240 35 19 58 20 370 21 314 0\n335 -1 372 -20z\"\n        />\n        <path\n          d=\"M2108 3786 c-3 -118 -6 -138 -24 -163 -21 -28 -106 -83 -201 -129\n-68 -33 -93 -28 -223 46 l-104 59 -53 -90 c-82 -141 -97 -169 -92 -172 2 -2\n45 -27 94 -55 152 -86 167 -109 159 -253 -10 -179 -16 -190 -157 -270 -51 -29\n-94 -54 -96 -56 -5 -3 10 -31 92 -172 l53 -90 104 59 c130 74 155 79 223 46\n95 -46 180 -101 201 -129 18 -25 21 -45 24 -163 l4 -134 148 0 148 0 4 134 c3\n118 6 138 24 163 21 28 106 83 201 129 68 33 93 28 223 -46 l104 -59 53 90\nc82 141 97 169 92 172 -2 2 -44 27 -94 55 -153 86 -168 110 -159 254 10 179\n16 190 157 269 51 29 94 54 96 56 5 3 -10 31 -92 172 l-53 90 -104 -59 c-130\n-74 -155 -79 -223 -46 -95 46 -180 101 -201 129 -18 25 -21 45 -24 163 l-4\n134 -148 0 -148 0 -4 -134z m274 -494 c59 -26 124 -91 151 -151 30 -64 30\n-178 0 -242 -27 -60 -92 -125 -152 -152 -64 -30 -178 -30 -242 0 -129 59 -202\n206 -169 342 43 180 242 278 412 203z\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Psychology);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Quantum = (): ReactElement => {\n  return (\n    <svg\n      height=\"1em\"\n      width=\"1em\"\n      viewBox=\"-23 0 512 512\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"m236.894531 205c-28.125 0-51 22.878906-51 51s22.878907 51 51 51c28.121094 0 51-22.878906 51-51s-22.878906-51-51-51zm0 0\" />\n      <path d=\"m64 318.707031c0-17.644531-14.355469-32-32-32s-32 14.355469-32 32 14.355469 32 32 32 32-14.355469 32-32zm0 0\" />\n      <path d=\"m415.996094 256c5.097656-5.621094 9.886718-11.257812 14.316406-16.890625 34.382812-43.691406 44.425781-83.152344 28.285156-111.109375-16.136718-27.957031-55.332031-38.988281-110.363281-31.058594-34.136719 4.917969-72.378906 16.734375-111.316406 34.121094-20.523438-9.167969-40.851563-16.777344-60.488281-22.648438 1.953124-5.957031 4.03125-11.707031 6.238281-17.222656 12.03125-30.074218 27.105469-50.632812 42.042969-58.085937 2.984374-12.847657 9.972656-24.175781 19.578124-32.59375-2.449218-.335938-4.917968-.511719-7.398437-.511719-32.28125 0-61.429687 28.429688-82.078125 80.050781-2.660156 6.65625-5.148438 13.621094-7.46875 20.847657-7.417969-1.605469-14.695312-2.933594-21.789062-3.957032-55.023438-7.925781-94.21875 3.101563-110.359376 31.058594-16.140624 27.957031-6.097656 67.417969 28.28125 111.109375 21.332032 27.109375 50.671876 54.328125 85.203126 79.359375 2.328124 22.351562 5.898437 43.753906 10.632812 63.6875-6.136719 1.289062-12.15625 2.363281-18.035156 3.210938-32.019532 4.613281-57.335938 1.847656-71.269532-7.335938-5.699218 1.734375-11.746093 2.679688-18.007812 2.679688-7.015625 0-13.753906-1.191407-20.046875-3.347657.933594 2.28125 2.007813 4.496094 3.242187 6.636719 12.726563 22.046875 39.78125 33.566406 77.640626 33.566406 10.152343 0 21.085937-.832031 32.722656-2.507812 7.09375-1.023438 14.371094-2.351563 21.789062-3.957032 2.316406 7.226563 4.804688 14.195313 7.46875 20.847657 20.644532 51.621093 49.796875 80.050781 82.074219 80.050781 32.28125 0 61.433594-28.429688 82.082031-80.050781 12.808594-32.03125 21.71875-71.050781 26.132813-113.472657 18.191406-13.1875 34.941406-26.980468 49.835937-41.046874 4.1875 4.671874 8.125 9.347656 11.796875 14.011718 20.070313 25.507813 30.332031 48.886719 29.269531 65.558594 9.273438 8.710938 15.871094 20.226562 18.421876 33.1875 1.523437-1.964844 2.921874-4.023438 4.167968-6.1875 16.144532-27.957031 6.097656-67.414062-28.28125-111.109375-4.433594-5.632813-9.222656-11.269531-14.320312-16.890625zm-63.480469-129.363281c40.84375-5.886719 70.789063.230469 80.101563 16.363281 9.316406 16.132812-.359376 45.125-25.878907 77.558594-3.671875 4.664062-7.609375 9.34375-11.796875 14.011718-28.351562-26.769531-63.402344-52.5625-102.347656-75.042968-6.585938-3.800782-13.199219-7.453125-19.820312-10.964844 28.03125-10.867188 55.113281-18.378906 79.742187-21.925781zm-285.460937 93.921875c-25.519532-32.429688-35.191407-61.425782-25.875-77.558594 9.3125-16.132812 39.253906-22.25 80.101562-16.363281 5.878906.84375 11.898438 1.917969 18.035156 3.207031-9.011718 37.9375-13.824218 81.1875-13.824218 126.15625 0 7.601562.144531 15.152344.417968 22.640625-23.425781-18.835937-43.472656-38.53125-58.855468-58.082031zm88.4375 35.441406c0-42.53125 4.480468-83.230469 12.863281-118.707031 34.917969 10.476562 72.40625 26.949219 109.238281 48.214843 36.835938 21.261719 69.84375 45.488282 96.378906 70.492188-26.535156 25-59.542968 49.230469-96.378906 70.492188-36.832031 21.265624-74.320312 37.738281-109.238281 48.214843-8.386719-35.476562-12.863281-76.175781-12.863281-118.707031zm135.625 164.808594c-15.328126 38.316406-35.597657 61.191406-54.226563 61.191406-18.625 0-38.898437-22.875-54.222656-61.191406-2.207031-5.515625-4.285157-11.265625-6.238281-17.222656 37.359374-11.167969 77.21875-28.628907 116.160156-51.113282 6.589844-3.800781 13.058594-7.703125 19.410156-11.683594-4.601562 29.707032-11.640625 56.914063-20.882812 80.019532zm0 0\" />\n      <path d=\"m393.601562 370.164062c-17.648437 0-32 14.355469-32 32 0 17.644532 14.351563 32 32 32 17.644532 0 32-14.355468 32-32 0-17.644531-14.359374-32-32-32zm0 0\" />\n      <path d=\"m285.09375 79.132812c17.644531 0 32-14.355468 32-32 0-17.644531-14.355469-32-32-32s-32 14.355469-32 32c0 17.644532 14.355469 32 32 32zm0 0\" />\n    </svg>\n  );\n};\n\nexport default withIcon(Quantum);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Swift = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"1em\"\n      width=\"1em\"\n      viewBox=\"0 0 333334 333015\"\n    >\n      <g>\n        <path\n          d=\"M73350 243h186101c41094-298 73883 32298 73883 73585v185770c0 40626-32789 73763-73883 73415H73350c-39718 0-72999-32789-72999-73415V73828C351 32541 33632-523 73350 243z\"\n          fill=\"transparent\"\n        />\n        <path\n          d=\"M281382 272374s-12972-21008-34183-21008c-21660 0-32351 21008-75206 21008-92987 0-137068-76506-138071-78316 0 519 519 519 519 519L0 158396V73558C0 32462 33572 1 73099 1h66538l48550 49735c52 0 52-519 532-1015 110252 76190 74705 158613 74705 158613s30525 34574 17958 65042z\"\n          fill=\"transparent\"\n        />\n        <path d=\"M189263 49490c109868 74795 74378 157625 74378 157625s30534 34878 18035 65459c0 0-12991-21231-34161-21231-21219 0-33928 21231-75302 21231-94193 0-137215-78533-137215-78533 83546 56856 141921 16544 141921 16544C138636 188424 57167 83892 57167 83892c70392 59101 100324 74754 100324 74754-17690-14066-68076-87098-68076-87098 41046 40763 121543 98528 121543 98528 22163-64076-21694-120586-21694-120586z\" />\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Swift);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Windows = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 512 512\"\n    >\n      <g>\n        <g>\n          <polygon points=\"0,80 0,240 224,240 224,52 \t\t\" />\n        </g>\n      </g>\n      <g>\n        <g>\n          <polygon points=\"256,48 256,240 512,240 512,16 \t\t\" />\n        </g>\n      </g>\n      <g>\n        <g>\n          <polygon points=\"256,272 256,464 512,496 512,272 \t\t\" />\n        </g>\n      </g>\n      <g>\n        <g>\n          <polygon points=\"0,272 0,432 224,460 224,272 \t\t\" />\n        </g>\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Windows);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Terminal = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 512.000000 512.000000\"\n    >\n      <g transform=\"translate(0.000000,512.000000) scale(0.100000,-0.100000)\">\n        <path\n          d=\"M116 4500 c-37 -12 -85 -56 -102 -97 -11 -26 -14 -120 -14 -463 l0\n-430 2560 0 2560 0 0 429 c0 279 -4 440 -11 458 -15 42 -68 92 -109 103 -44\n12 -4842 12 -4884 0z m3174 -280 c49 -13 109 -66 131 -114 24 -53 24 -139 0\n-191 -75 -165 -313 -167 -395 -3 -42 85 -31 170 32 240 62 69 143 93 232 68z\nm656 -26 c70 -43 108 -117 101 -200 -9 -114 -87 -194 -197 -202 -72 -5 -122\n11 -171 55 -77 70 -92 200 -33 286 67 96 199 124 300 61z m580 17 c56 -25 110\n-92 124 -152 33 -136 -73 -269 -214 -269 -102 1 -195 75 -215 171 -38 177 141\n324 305 250z\"\n        />\n        <path\n          d=\"M0 1966 c0 -832 3 -1224 11 -1243 15 -42 68 -92 109 -103 48 -14\n4832 -14 4880 0 41 11 94 61 109 103 8 19 11 411 11 1243 l0 1214 -2560 0\n-2560 0 0 -1214z m1777 540 c11 -6 153 -123 313 -260 219 -186 296 -257 307\n-284 19 -46 12 -125 -14 -160 -38 -52 -587 -511 -630 -528 -77 -30 -160 6\n-201 86 -25 49 -24 97 3 150 8 15 109 107 224 206 l210 178 -32 27 c-212 176\n-385 331 -401 358 -39 68 -19 166 45 213 49 37 122 43 176 14z m1720 -928\nc122 -67 116 -241 -11 -299 -37 -17 -72 -19 -396 -19 -349 0 -357 0 -400 23\n-51 26 -78 59 -90 110 -20 90 33 175 123 198 17 4 192 7 387 6 316 -2 359 -4\n387 -19z\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Terminal);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Office = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 512.000000 512.000000\"\n    >\n      <g transform=\"translate(0.000000,512.000000) scale(0.100000,-0.100000)\">\n        <path\n          d=\"M1760 4561 l-1435 -559 -3 -1520 c-2 -1403 -1 -1520 14 -1526 9 -4\n19 -4 22 -1 3 3 -1 5 -9 6 -8 0 197 71 456 158 l470 158 3 1281 2 1280 28 6\nc15 3 434 73 932 156 498 83 917 153 933 156 l27 6 0 -1766 c0 -1695 -1 -1766\n-18 -1766 -10 0 -638 72 -1396 160 -758 88 -1388 160 -1400 159 -11 0 618\n-214 1398 -474 l1419 -474 701 210 c386 116 745 224 798 240 l98 30 0 2079 0\n2079 -97 30 c-188 57 -1503 451 -1505 451 -2 -1 -649 -252 -1438 -559z\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Office);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Profile = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0, 0, 400,400\"\n    >\n      <g>\n        <path\n          id=\"path0\"\n          d=\"M151.212 249.188 C 147.849 252.504,146.351 255.403,144.798 261.600 C 143.847 265.394,143.652 265.813,142.773 265.934 C 140.444 266.255,123.559 271.500,121.905 272.415 C 121.523 272.627,120.936 272.800,120.600 272.800 C 120.264 272.800,119.677 272.959,119.295 273.153 C 118.913 273.348,118.150 273.689,117.600 273.913 C 117.050 274.136,115.880 274.628,115.000 275.007 C 111.535 276.497,110.937 276.750,109.200 277.458 C 105.739 278.868,91.778 285.960,89.287 287.573 C 87.904 288.468,86.599 289.200,86.387 289.200 C 86.174 289.200,86.000 289.380,86.000 289.600 C 86.000 289.820,85.810 290.000,85.578 290.000 C 85.346 290.000,84.096 290.720,82.800 291.600 C 81.504 292.480,80.288 293.200,80.097 293.200 C 79.907 293.200,79.402 293.520,78.975 293.911 C 78.549 294.302,77.570 295.058,76.800 295.592 C 76.030 296.125,75.310 296.672,75.200 296.806 C 75.090 296.941,73.110 298.474,70.800 300.214 C 63.643 305.604,56.081 312.817,49.985 320.071 C 44.374 326.747,44.548 325.843,48.130 329.737 C 48.972 330.652,50.142 332.030,50.730 332.799 C 51.936 334.376,63.127 345.656,66.214 348.406 C 67.322 349.393,69.195 351.010,70.378 352.000 C 71.561 352.990,73.373 354.565,74.406 355.500 C 75.438 356.435,76.397 357.200,76.537 357.200 C 76.786 357.200,77.972 358.109,79.016 359.100 C 79.306 359.375,79.714 359.600,79.922 359.600 C 80.131 359.600,80.549 359.897,80.851 360.261 C 81.581 361.141,85.468 364.000,85.934 364.000 C 86.136 364.000,86.529 364.273,86.806 364.607 C 87.083 364.941,87.915 365.502,88.655 365.853 C 89.395 366.204,90.000 366.651,90.000 366.846 C 90.000 367.041,90.270 367.200,90.600 367.200 C 90.930 367.200,91.200 367.350,91.200 367.532 C 91.200 367.715,91.695 368.120,92.300 368.432 C 92.905 368.744,93.490 369.089,93.600 369.199 C 93.994 369.595,96.213 370.854,96.900 371.071 C 97.285 371.193,97.600 371.452,97.600 371.647 C 97.600 371.841,97.836 372.000,98.125 372.000 C 98.413 372.000,99.036 372.360,99.508 372.800 C 99.980 373.240,100.644 373.600,100.983 373.600 C 101.322 373.600,101.600 373.780,101.600 374.000 C 101.600 374.220,101.870 374.400,102.200 374.400 C 102.530 374.400,102.800 374.580,102.800 374.800 C 102.800 375.020,103.053 375.200,103.362 375.200 C 104.119 375.200,107.200 376.865,107.200 377.274 C 107.200 377.453,107.560 377.600,108.000 377.600 C 108.440 377.600,108.800 377.780,108.800 378.000 C 108.800 378.220,109.160 378.400,109.600 378.400 C 110.040 378.400,110.400 378.559,110.400 378.753 C 110.400 379.048,110.925 379.310,112.400 379.752 C 112.510 379.785,112.870 379.985,113.200 380.196 C 113.530 380.406,113.980 380.585,114.200 380.593 C 114.420 380.600,115.320 380.941,116.200 381.351 C 117.080 381.760,118.745 382.537,119.900 383.077 C 121.055 383.617,122.000 384.236,122.000 384.453 C 122.000 384.670,122.197 384.725,122.438 384.576 C 122.833 384.332,123.617 384.590,125.695 385.647 C 126.077 385.841,126.752 386.000,127.195 386.000 C 127.638 386.000,128.000 386.180,128.000 386.400 C 128.000 386.620,128.450 386.800,129.000 386.800 C 129.550 386.800,130.000 386.980,130.000 387.200 C 130.000 387.420,130.450 387.600,131.000 387.600 C 131.550 387.600,132.000 387.780,132.000 388.000 C 132.000 388.220,132.439 388.400,132.976 388.400 C 133.513 388.400,134.064 388.580,134.200 388.800 C 134.336 389.020,134.977 389.200,135.624 389.200 C 136.271 389.200,136.800 389.380,136.800 389.600 C 136.800 389.820,137.340 390.000,138.000 390.000 C 138.660 390.000,139.200 390.180,139.200 390.400 C 139.200 390.620,139.740 390.800,140.400 390.800 C 141.060 390.800,141.600 390.980,141.600 391.200 C 141.600 391.420,142.140 391.600,142.800 391.600 C 143.460 391.600,144.000 391.780,144.000 392.000 C 144.000 392.220,144.630 392.400,145.400 392.400 C 146.170 392.400,146.800 392.580,146.800 392.800 C 146.800 393.020,147.520 393.200,148.400 393.200 C 149.280 393.200,150.000 393.380,150.000 393.600 C 150.000 393.820,150.630 394.000,151.400 394.000 C 152.170 394.000,152.800 394.180,152.800 394.400 C 152.800 394.620,153.520 394.800,154.400 394.800 C 155.321 394.800,156.000 394.991,156.000 395.251 C 156.000 395.552,156.523 395.619,157.571 395.451 C 158.616 395.284,159.320 395.373,159.671 395.715 C 159.962 395.999,160.974 396.228,161.920 396.225 C 162.866 396.221,163.774 396.434,163.936 396.697 C 164.119 396.993,165.056 397.142,166.383 397.088 C 167.643 397.036,168.592 397.179,168.677 397.432 C 168.766 397.699,169.628 397.797,170.939 397.688 C 172.486 397.560,173.220 397.677,173.666 398.124 C 174.127 398.585,175.080 398.718,177.551 398.667 C 179.412 398.629,180.948 398.777,181.112 399.010 C 181.415 399.441,188.628 399.708,200.000 399.708 C 211.372 399.708,218.585 399.441,218.888 399.010 C 219.052 398.777,220.588 398.629,222.449 398.667 C 224.920 398.718,225.873 398.585,226.334 398.124 C 226.780 397.677,227.514 397.560,229.061 397.688 C 230.372 397.797,231.234 397.699,231.323 397.432 C 231.408 397.179,232.357 397.036,233.617 397.088 C 234.944 397.142,235.881 396.993,236.064 396.697 C 236.226 396.434,237.134 396.221,238.080 396.225 C 239.026 396.228,240.038 395.999,240.329 395.715 C 240.680 395.373,241.384 395.284,242.429 395.451 C 243.477 395.619,244.000 395.552,244.000 395.251 C 244.000 394.991,244.679 394.800,245.600 394.800 C 246.480 394.800,247.200 394.620,247.200 394.400 C 247.200 394.180,247.830 394.000,248.600 394.000 C 249.370 394.000,250.000 393.820,250.000 393.600 C 250.000 393.380,250.720 393.200,251.600 393.200 C 252.480 393.200,253.200 393.020,253.200 392.800 C 253.200 392.580,253.830 392.400,254.600 392.400 C 255.370 392.400,256.000 392.220,256.000 392.000 C 256.000 391.780,256.540 391.600,257.200 391.600 C 257.860 391.600,258.400 391.420,258.400 391.200 C 258.400 390.980,258.940 390.800,259.600 390.800 C 260.260 390.800,260.800 390.620,260.800 390.400 C 260.800 390.180,261.340 390.000,262.000 390.000 C 262.660 390.000,263.200 389.820,263.200 389.600 C 263.200 389.380,263.729 389.200,264.376 389.200 C 265.023 389.200,265.664 389.020,265.800 388.800 C 265.936 388.580,266.487 388.400,267.024 388.400 C 267.561 388.400,268.000 388.220,268.000 388.000 C 268.000 387.780,268.450 387.600,269.000 387.600 C 269.550 387.600,270.000 387.420,270.000 387.200 C 270.000 386.980,270.450 386.800,271.000 386.800 C 271.550 386.800,272.000 386.620,272.000 386.400 C 272.000 386.180,272.362 386.000,272.805 386.000 C 273.248 386.000,273.923 385.841,274.305 385.647 C 276.383 384.590,277.167 384.332,277.562 384.576 C 277.803 384.725,278.000 384.670,278.000 384.453 C 278.000 384.236,278.945 383.617,280.100 383.077 C 281.255 382.537,282.920 381.760,283.800 381.351 C 284.680 380.941,285.601 380.602,285.846 380.597 C 286.091 380.592,286.541 380.381,286.846 380.128 C 287.151 379.875,287.490 379.648,287.600 379.623 C 289.008 379.304,289.600 379.046,289.600 378.753 C 289.600 378.559,289.960 378.400,290.400 378.400 C 290.840 378.400,291.200 378.220,291.200 378.000 C 291.200 377.780,291.560 377.600,292.000 377.600 C 292.440 377.600,292.800 377.453,292.800 377.274 C 292.800 376.865,295.881 375.200,296.638 375.200 C 296.947 375.200,297.200 375.020,297.200 374.800 C 297.200 374.580,297.470 374.400,297.800 374.400 C 298.130 374.400,298.400 374.220,298.400 374.000 C 298.400 373.780,298.760 373.600,299.200 373.600 C 299.640 373.600,300.000 373.450,300.000 373.268 C 300.000 373.085,300.495 372.680,301.100 372.368 C 301.705 372.056,302.290 371.711,302.400 371.601 C 302.794 371.205,305.013 369.946,305.700 369.729 C 306.085 369.607,306.400 369.348,306.400 369.153 C 306.400 368.959,306.636 368.800,306.925 368.800 C 307.213 368.800,307.836 368.440,308.308 368.000 C 308.780 367.560,309.354 367.200,309.583 367.200 C 309.812 367.200,310.000 367.041,310.000 366.846 C 310.000 366.651,310.605 366.204,311.345 365.853 C 312.085 365.502,312.917 364.941,313.194 364.607 C 313.471 364.273,313.864 364.000,314.066 364.000 C 314.532 364.000,318.419 361.141,319.149 360.261 C 319.451 359.897,319.854 359.600,320.044 359.600 C 320.373 359.600,321.461 358.796,322.616 357.700 C 322.906 357.425,323.272 357.200,323.430 357.200 C 323.588 357.200,324.562 356.435,325.594 355.500 C 326.627 354.565,328.439 352.990,329.622 352.000 C 330.805 351.010,332.678 349.393,333.786 348.406 C 336.873 345.656,348.064 334.376,349.270 332.799 C 349.858 332.030,351.028 330.652,351.870 329.737 C 355.013 326.320,354.936 326.470,354.161 325.267 C 349.857 318.591,333.759 302.769,325.600 297.195 C 324.830 296.669,324.110 296.126,324.000 295.989 C 323.574 295.458,318.821 292.400,318.422 292.400 C 318.190 292.400,318.000 292.241,318.000 292.047 C 318.000 291.852,317.685 291.592,317.300 291.467 C 316.915 291.343,314.890 290.148,312.800 288.813 C 310.710 287.477,305.310 284.542,300.800 282.290 C 293.581 278.686,291.727 277.823,288.200 276.420 C 287.760 276.245,286.500 275.696,285.400 275.200 C 282.748 274.005,282.093 273.746,280.200 273.145 C 279.320 272.865,278.429 272.493,278.220 272.318 C 278.011 272.143,277.437 272.000,276.944 272.000 C 276.451 272.000,275.936 271.820,275.800 271.600 C 275.664 271.380,275.201 271.200,274.771 271.200 C 274.341 271.200,273.677 271.026,273.295 270.813 C 272.569 270.408,269.462 269.337,267.400 268.782 C 263.677 267.778,256.299 265.628,256.215 265.523 C 256.160 265.455,255.708 263.690,255.210 261.600 C 253.813 255.743,252.123 252.478,248.789 249.189 C 245.808 246.250,245.200 245.909,245.200 247.181 C 245.200 247.611,245.039 248.376,244.842 248.881 C 244.645 249.387,244.267 250.610,244.003 251.600 C 243.738 252.590,243.325 253.760,243.083 254.200 C 242.842 254.640,242.179 255.900,241.610 257.000 C 236.936 266.036,221.937 277.510,207.300 283.247 C 206.805 283.441,205.995 283.756,205.500 283.946 C 203.999 284.524,202.240 285.273,201.505 285.647 C 200.613 286.100,199.309 286.101,199.029 285.647 C 198.909 285.453,197.324 284.715,195.506 284.007 C 192.547 282.854,186.728 280.230,184.600 279.089 C 184.160 278.853,183.080 278.287,182.200 277.830 C 181.320 277.374,180.510 276.910,180.400 276.800 C 180.290 276.690,179.390 276.164,178.400 275.631 C 170.458 271.357,161.504 263.028,158.406 257.032 C 157.828 255.914,157.158 254.640,156.917 254.200 C 156.675 253.760,156.262 252.590,155.997 251.600 C 155.733 250.610,155.355 249.387,155.158 248.881 C 154.961 248.376,154.800 247.611,154.800 247.181 C 154.800 245.909,154.192 246.249,151.212 249.188 M143.495 274.487 C 143.414 275.649,143.347 274.800,143.346 272.600 C 143.345 270.400,143.411 269.449,143.493 270.487 C 143.576 271.524,143.576 273.324,143.495 274.487 M145.083 288.895 C 144.987 289.393,144.905 289.080,144.901 288.200 C 144.896 287.320,144.975 286.913,145.075 287.295 C 145.175 287.678,145.179 288.398,145.083 288.895 M145.972 292.100 C 145.949 293.159,145.885 293.251,145.627 292.600 C 145.453 292.160,145.395 291.575,145.498 291.300 C 145.820 290.442,146.001 290.748,145.972 292.100 M150.800 308.600 C 150.800 308.930,150.620 309.200,150.400 309.200 C 150.180 309.200,150.000 308.930,150.000 308.600 C 150.000 308.270,150.180 308.000,150.400 308.000 C 150.620 308.000,150.800 308.270,150.800 308.600 \"\n          stroke=\"none\"\n          fill=\"var(--color-4)\"\n          fillRule=\"evenodd\"\n        />\n        <path\n          id=\"path1\"\n          d=\"M187.200 86.391 C 186.870 86.609,185.756 86.791,184.724 86.794 C 183.692 86.797,182.736 86.980,182.600 87.200 C 182.464 87.420,181.731 87.600,180.971 87.600 C 180.211 87.600,179.277 87.762,178.895 87.961 C 178.513 88.160,177.390 88.540,176.400 88.807 C 173.038 89.712,165.470 93.318,161.800 95.763 C 156.794 99.099,149.466 107.396,146.577 113.000 C 146.123 113.880,145.557 114.960,145.320 115.400 C 144.824 116.318,143.288 119.722,142.703 121.200 C 142.485 121.750,142.148 122.513,141.953 122.895 C 141.759 123.277,141.600 123.941,141.600 124.371 C 141.600 124.801,141.420 125.264,141.200 125.400 C 140.980 125.536,140.800 126.076,140.800 126.600 C 140.800 127.124,140.620 127.664,140.400 127.800 C 140.180 127.936,140.000 128.656,140.000 129.400 C 140.000 130.144,139.820 130.864,139.600 131.000 C 139.380 131.136,139.200 131.831,139.200 132.544 C 139.200 133.257,139.037 134.011,138.839 134.220 C 138.640 134.429,138.367 135.500,138.232 136.600 C 138.096 137.700,137.801 139.860,137.576 141.400 C 135.898 152.854,135.905 173.637,137.589 180.000 C 137.851 180.990,138.160 182.476,138.275 183.303 C 138.390 184.129,138.645 184.905,138.842 185.026 C 139.039 185.148,139.200 185.676,139.200 186.200 C 139.200 186.724,139.380 187.264,139.600 187.400 C 139.820 187.536,140.000 187.980,140.000 188.386 C 140.000 189.024,140.492 190.202,142.050 193.295 C 142.243 193.677,142.400 194.179,142.400 194.411 C 142.400 194.643,142.760 195.220,143.200 195.692 C 143.640 196.164,144.000 196.787,144.000 197.075 C 144.000 197.364,144.180 197.600,144.400 197.600 C 144.620 197.600,144.800 197.799,144.800 198.042 C 144.800 198.459,150.612 207.175,151.174 207.600 C 151.320 207.710,151.877 208.430,152.413 209.200 C 152.948 209.970,153.930 211.154,154.593 211.832 C 155.257 212.510,156.880 214.220,158.201 215.632 C 159.521 217.044,161.951 219.370,163.601 220.800 C 165.250 222.229,166.735 223.579,166.900 223.800 C 167.319 224.358,167.853 223.431,168.630 220.800 C 168.988 219.590,169.421 218.240,169.594 217.800 C 169.767 217.360,170.127 216.190,170.393 215.200 C 170.660 214.210,171.040 213.087,171.239 212.705 C 171.438 212.323,171.600 211.766,171.600 211.467 C 171.600 211.168,171.883 210.355,172.229 209.661 L 172.859 208.400 200.000 208.400 L 227.141 208.400 227.771 209.661 C 228.117 210.355,228.400 211.168,228.400 211.467 C 228.400 211.766,228.561 212.323,228.759 212.705 C 228.956 213.087,229.702 215.290,230.416 217.600 C 232.407 224.036,232.387 223.996,233.327 223.237 C 238.107 219.372,244.907 212.676,246.837 209.931 C 247.352 209.199,248.014 208.352,248.309 208.050 C 249.678 206.641,254.239 199.442,255.499 196.700 C 255.878 195.875,256.326 195.200,256.494 195.200 C 256.662 195.200,256.800 194.840,256.800 194.400 C 256.800 193.960,256.980 193.600,257.200 193.600 C 257.420 193.600,257.600 193.240,257.600 192.800 C 257.600 192.360,257.780 192.000,258.000 192.000 C 258.220 192.000,258.400 191.728,258.400 191.395 C 258.400 191.062,258.559 190.477,258.753 190.095 C 258.948 189.713,259.284 188.950,259.500 188.400 C 260.189 186.646,260.883 185.021,261.247 184.305 C 261.441 183.923,261.600 183.259,261.600 182.829 C 261.600 182.399,261.759 181.949,261.954 181.829 C 262.149 181.708,262.407 181.113,262.529 180.505 C 262.828 179.014,263.448 176.543,264.010 174.600 C 265.189 170.521,266.491 159.492,267.253 147.112 C 268.091 133.512,266.166 119.860,262.219 111.400 C 261.706 110.300,260.976 108.725,260.597 107.900 C 260.219 107.075,259.749 106.400,259.554 106.400 C 259.359 106.400,259.200 106.164,259.200 105.875 C 259.200 105.587,258.840 104.964,258.400 104.492 C 257.960 104.020,257.600 103.477,257.600 103.286 C 257.600 102.952,252.208 97.651,250.577 96.382 C 248.770 94.977,246.030 93.200,245.669 93.200 C 245.456 93.200,244.255 92.660,243.000 92.000 C 241.745 91.340,240.388 90.800,239.983 90.800 C 239.578 90.800,239.136 90.620,239.000 90.400 C 238.864 90.180,238.234 90.000,237.600 90.000 C 236.966 90.000,236.336 89.820,236.200 89.600 C 236.064 89.380,235.369 89.200,234.656 89.200 C 233.943 89.200,233.189 89.033,232.980 88.829 C 232.483 88.344,227.504 87.989,218.672 87.809 C 214.752 87.730,211.242 87.528,210.872 87.361 C 208.832 86.441,188.392 85.603,187.200 86.391 M274.400 157.576 C 274.400 158.223,274.220 158.864,274.000 159.000 C 273.780 159.136,273.600 159.856,273.600 160.600 C 273.600 161.344,273.420 162.064,273.200 162.200 C 272.980 162.336,272.800 163.056,272.800 163.800 C 272.800 164.544,272.640 165.252,272.444 165.373 C 272.249 165.494,271.974 166.269,271.833 167.096 C 271.150 171.126,270.860 172.682,270.619 173.600 C 270.474 174.150,270.201 175.230,270.011 176.000 C 269.821 176.770,269.478 178.120,269.248 179.000 C 269.018 179.880,268.540 181.831,268.187 183.336 C 267.498 186.271,264.647 194.949,263.995 196.095 C 263.778 196.477,263.600 197.064,263.600 197.400 C 263.600 197.736,263.382 198.360,263.115 198.787 C 261.433 201.481,266.964 198.474,271.528 194.213 C 280.442 185.892,285.460 170.226,281.791 162.176 C 279.923 158.078,274.400 154.641,274.400 157.576 M121.579 158.152 C 113.433 163.711,116.313 181.106,127.370 193.134 C 131.177 197.275,138.751 201.775,136.885 198.787 C 136.618 198.360,136.400 197.659,136.400 197.229 C 136.400 196.799,136.241 196.349,136.048 196.230 C 135.854 196.110,135.603 195.604,135.490 195.106 C 135.270 194.142,131.407 182.748,130.842 181.400 C 130.658 180.960,130.315 180.150,130.080 179.600 C 129.845 179.050,129.424 177.880,129.145 177.000 C 128.865 176.120,128.493 175.229,128.318 175.020 C 128.143 174.811,128.000 174.237,128.000 173.744 C 128.000 173.251,127.820 172.736,127.600 172.600 C 127.380 172.464,127.200 171.924,127.200 171.400 C 127.200 170.876,127.020 170.336,126.800 170.200 C 126.580 170.064,126.400 169.434,126.400 168.800 C 126.400 168.166,126.220 167.536,126.000 167.400 C 125.780 167.264,125.600 166.724,125.600 166.200 C 125.600 165.676,125.420 165.136,125.200 165.000 C 124.980 164.864,124.800 164.223,124.800 163.576 C 124.800 162.929,124.620 162.400,124.400 162.400 C 124.180 162.400,124.000 161.806,124.000 161.080 C 124.000 160.354,123.835 159.589,123.634 159.380 C 123.432 159.171,123.207 158.591,123.134 158.091 L 123.000 157.182 121.579 158.152 M180.600 221.836 C 182.385 223.421,185.401 225.600,185.810 225.600 C 185.957 225.600,186.554 225.926,187.138 226.325 C 187.722 226.724,189.010 227.297,190.000 227.598 C 190.990 227.898,191.980 228.267,192.200 228.417 C 193.972 229.626,207.081 229.564,207.835 228.343 C 207.952 228.154,208.476 228.000,209.000 228.000 C 209.524 228.000,210.064 227.820,210.200 227.600 C 210.336 227.380,210.809 227.200,211.252 227.200 C 211.694 227.200,212.841 226.660,213.800 226.000 C 214.759 225.340,215.737 224.800,215.972 224.800 C 216.207 224.800,216.400 224.620,216.400 224.400 C 216.400 224.180,216.581 224.000,216.801 224.000 C 217.022 224.000,218.057 223.191,219.101 222.202 L 221.000 220.404 200.000 220.410 L 179.000 220.415 180.600 221.836 M155.981 237.500 C 152.878 254.150,161.885 266.845,185.600 279.246 C 189.972 281.533,198.996 285.205,200.234 285.202 C 204.264 285.192,224.392 274.418,231.000 268.735 C 242.464 258.876,246.291 249.693,244.019 237.500 C 243.357 233.949,243.242 233.869,241.720 235.882 C 238.315 240.386,229.895 248.237,225.418 251.083 C 224.308 251.788,223.220 252.510,223.000 252.687 C 222.552 253.046,215.951 256.276,214.400 256.895 C 213.850 257.114,213.087 257.452,212.705 257.647 C 212.323 257.841,211.569 258.000,211.029 258.000 C 210.489 258.000,209.936 258.180,209.800 258.400 C 209.664 258.620,208.854 258.800,208.000 258.800 C 207.146 258.800,206.336 258.980,206.200 259.200 C 206.053 259.438,203.537 259.600,200.000 259.600 C 196.463 259.600,193.947 259.438,193.800 259.200 C 193.664 258.980,192.854 258.800,192.000 258.800 C 191.146 258.800,190.336 258.620,190.200 258.400 C 190.064 258.180,189.511 258.000,188.971 258.000 C 188.431 258.000,187.677 257.841,187.295 257.647 C 186.913 257.452,186.150 257.114,185.600 256.895 C 184.049 256.276,177.448 253.046,177.000 252.687 C 176.780 252.510,175.692 251.788,174.582 251.083 C 170.105 248.237,161.685 240.386,158.280 235.882 C 156.758 233.869,156.643 233.949,155.981 237.500 \"\n          stroke=\"none\"\n          fill=\"#f5dcb4\"\n          fillRule=\"evenodd\"\n        />\n        <path\n          id=\"path2\"\n          d=\"M189.600 28.664 C 189.050 28.749,187.880 28.980,187.000 29.177 C 186.120 29.374,184.320 29.743,183.000 29.997 C 180.294 30.519,177.788 31.144,176.600 31.595 C 176.160 31.761,174.000 32.473,171.800 33.176 C 169.600 33.879,166.630 35.004,165.200 35.675 C 163.770 36.347,161.430 37.452,160.000 38.130 C 143.394 46.010,126.486 64.644,119.650 82.600 C 119.147 83.920,118.570 85.313,118.368 85.695 C 118.166 86.077,118.000 86.716,118.000 87.115 C 118.000 87.514,117.851 88.011,117.670 88.220 C 117.488 88.429,117.095 89.410,116.798 90.400 C 116.500 91.390,116.131 92.380,115.978 92.600 C 115.825 92.820,115.599 93.540,115.475 94.200 C 115.351 94.860,115.049 96.210,114.804 97.200 C 114.040 100.293,113.614 102.948,113.846 103.178 C 114.069 103.401,114.290 103.167,117.600 99.194 C 121.828 94.119,122.661 93.550,121.345 96.639 C 120.979 97.497,120.517 98.920,120.318 99.800 C 120.119 100.680,119.775 102.210,119.553 103.200 C 118.211 109.187,117.765 124.690,118.718 132.200 C 119.483 138.229,121.095 147.579,121.975 151.100 C 122.209 152.035,122.568 153.475,122.773 154.300 C 122.979 155.125,123.327 156.430,123.546 157.200 C 123.766 157.970,124.058 159.050,124.195 159.600 C 124.797 162.020,125.314 163.859,125.600 164.600 C 125.770 165.040,126.130 166.210,126.400 167.200 C 126.670 168.190,127.026 169.360,127.190 169.800 C 127.355 170.240,127.707 171.320,127.973 172.200 C 128.444 173.755,129.742 177.382,130.407 179.000 C 130.927 180.265,132.654 185.155,133.586 188.000 C 134.055 189.430,134.609 190.913,134.819 191.295 C 135.029 191.677,135.200 192.264,135.200 192.600 C 135.200 192.936,135.380 193.568,135.600 194.005 C 135.820 194.442,136.180 195.158,136.400 195.595 C 136.620 196.032,136.800 196.741,136.800 197.171 C 136.800 197.601,136.980 198.064,137.200 198.200 C 137.420 198.336,137.600 198.701,137.600 199.012 C 137.600 199.322,138.076 200.617,138.659 201.888 C 139.241 203.160,140.687 206.360,141.872 209.000 C 143.057 211.640,144.471 214.471,145.014 215.291 C 145.556 216.112,146.000 216.894,146.000 217.030 C 146.000 217.165,146.345 217.761,146.767 218.354 C 147.189 218.947,148.117 220.505,148.829 221.816 C 150.621 225.118,153.771 229.745,156.171 232.600 C 157.281 233.920,158.371 235.226,158.594 235.502 C 161.465 239.052,167.320 244.877,171.400 248.242 C 174.998 251.209,185.077 256.779,186.876 256.794 C 187.248 256.797,187.664 256.980,187.800 257.200 C 187.936 257.420,188.541 257.600,189.144 257.600 C 189.747 257.600,190.411 257.762,190.620 257.959 C 191.987 259.251,208.013 259.251,209.380 257.959 C 209.589 257.762,210.253 257.600,210.856 257.600 C 211.459 257.600,212.064 257.420,212.200 257.200 C 212.336 256.980,212.752 256.797,213.124 256.794 C 214.923 256.779,225.002 251.209,228.600 248.242 C 232.680 244.877,238.535 239.052,241.406 235.502 C 241.629 235.226,242.719 233.920,243.829 232.600 C 246.229 229.745,249.379 225.118,251.171 221.816 C 251.883 220.505,252.811 218.947,253.233 218.354 C 253.655 217.761,254.000 217.165,254.000 217.030 C 254.000 216.894,254.444 216.112,254.986 215.291 C 255.529 214.471,256.943 211.640,258.128 209.000 C 259.313 206.360,260.759 203.160,261.341 201.888 C 261.924 200.617,262.400 199.322,262.400 199.012 C 262.400 198.701,262.580 198.336,262.800 198.200 C 263.020 198.064,263.200 197.601,263.200 197.171 C 263.200 196.741,263.380 196.032,263.600 195.595 C 263.820 195.158,264.180 194.442,264.400 194.005 C 264.620 193.568,264.800 192.936,264.800 192.600 C 264.800 192.264,264.971 191.677,265.181 191.295 C 265.882 190.017,267.154 185.842,268.194 181.400 C 268.761 178.980,269.390 176.370,269.591 175.600 C 269.792 174.830,270.074 173.750,270.219 173.200 C 270.363 172.650,270.631 171.300,270.813 170.200 C 270.995 169.100,271.350 167.390,271.601 166.400 C 271.852 165.410,272.155 164.013,272.273 163.296 C 272.392 162.579,272.649 161.894,272.844 161.773 C 273.040 161.652,273.200 160.944,273.200 160.200 C 273.200 159.456,273.380 158.736,273.600 158.600 C 273.820 158.464,274.000 157.911,274.000 157.371 C 274.000 156.831,274.171 156.077,274.380 155.695 C 274.718 155.076,275.289 153.024,276.436 148.300 C 276.636 147.475,276.993 146.035,277.229 145.100 C 277.465 144.165,277.755 142.813,277.873 142.096 C 277.992 141.379,278.249 140.694,278.444 140.573 C 278.640 140.452,278.800 139.744,278.800 139.000 C 278.800 138.256,278.960 137.548,279.156 137.427 C 279.351 137.306,279.605 136.621,279.719 135.904 C 279.832 135.187,280.135 133.880,280.391 133.000 C 280.646 132.120,280.947 130.950,281.058 130.400 C 281.169 129.850,281.413 129.040,281.600 128.600 C 281.787 128.160,282.052 127.260,282.189 126.600 C 282.326 125.940,282.533 124.950,282.649 124.400 C 282.765 123.850,283.013 123.040,283.200 122.600 C 283.624 121.601,283.944 120.124,284.454 116.800 C 285.184 112.049,285.533 109.830,286.058 106.600 C 286.755 102.314,286.767 84.012,286.075 80.200 C 285.796 78.660,285.465 76.813,285.340 76.096 C 285.214 75.379,284.951 74.694,284.756 74.573 C 284.560 74.452,284.400 74.001,284.400 73.572 C 284.400 72.820,283.580 70.764,281.937 67.400 C 278.600 60.565,270.984 54.635,263.600 53.122 C 257.343 51.839,242.270 52.192,241.374 53.642 C 241.252 53.839,240.681 54.000,240.105 54.000 C 239.026 54.000,236.743 54.623,235.491 55.258 C 234.597 55.712,234.483 55.390,234.264 51.800 C 233.778 43.838,229.660 38.280,221.139 34.087 C 218.806 32.939,216.526 32.000,216.072 32.000 C 215.619 32.000,215.148 31.840,215.027 31.644 C 214.906 31.449,214.221 31.188,213.504 31.066 C 212.787 30.944,211.300 30.646,210.200 30.404 C 205.843 29.444,204.005 29.179,199.200 28.815 C 194.102 28.430,191.385 28.387,189.600 28.664 M208.000 86.400 C 209.650 86.641,214.600 87.002,219.000 87.204 C 227.733 87.603,232.525 88.083,235.000 88.807 C 235.880 89.064,237.187 89.368,237.904 89.481 C 238.621 89.595,239.306 89.849,239.427 90.044 C 239.548 90.240,239.968 90.400,240.359 90.400 C 241.505 90.400,248.388 94.079,251.000 96.088 C 260.570 103.446,265.396 113.789,267.581 131.621 C 268.702 140.769,266.970 164.409,264.419 174.781 C 263.350 179.124,261.773 184.297,260.815 186.600 C 258.632 191.844,255.724 197.790,254.324 199.872 C 253.706 200.792,253.200 201.722,253.200 201.939 C 253.200 202.156,253.058 202.393,252.885 202.467 C 252.712 202.540,252.082 203.442,251.485 204.472 C 250.888 205.501,250.169 206.581,249.887 206.872 C 249.606 207.162,248.506 208.536,247.445 209.926 C 243.749 214.760,232.746 225.219,232.277 224.344 C 232.235 224.265,231.975 223.797,231.700 223.305 C 231.425 222.813,231.200 222.136,231.200 221.800 C 231.200 221.464,231.038 220.877,230.841 220.495 C 230.644 220.113,230.085 218.450,229.600 216.800 C 229.115 215.150,228.556 213.487,228.359 213.105 C 228.162 212.723,228.000 212.166,228.000 211.867 C 228.000 211.568,227.717 210.755,227.371 210.061 L 226.741 208.800 199.989 208.800 L 173.238 208.800 172.671 210.100 C 172.359 210.815,171.883 212.210,171.613 213.200 C 171.343 214.190,170.960 215.313,170.761 215.695 C 170.562 216.077,170.400 216.664,170.400 217.000 C 170.400 217.336,170.238 217.923,170.041 218.305 C 169.844 218.687,169.272 220.309,168.770 221.910 C 168.269 223.510,167.726 224.770,167.565 224.710 C 165.753 224.032,154.719 213.058,151.142 208.375 C 148.324 204.686,144.400 198.991,144.400 198.590 C 144.400 198.455,143.893 197.592,143.272 196.672 C 142.032 194.833,140.798 192.266,139.970 189.800 C 139.675 188.920,139.311 188.020,139.161 187.800 C 135.388 182.252,134.701 152.944,137.952 136.200 C 138.165 135.100,138.468 133.431,138.624 132.490 C 138.780 131.550,139.064 130.684,139.254 130.567 C 139.444 130.449,139.600 129.971,139.600 129.505 C 139.600 128.604,140.265 126.261,140.849 125.105 C 141.042 124.723,141.200 124.136,141.200 123.800 C 141.200 123.464,141.359 122.877,141.553 122.495 C 141.748 122.113,142.086 121.350,142.306 120.800 C 143.725 117.243,146.680 111.613,148.899 108.239 C 150.281 106.138,154.131 101.592,155.879 99.998 C 158.362 97.734,161.187 95.449,161.761 95.240 C 162.002 95.152,162.290 94.946,162.400 94.782 C 163.479 93.171,176.449 87.930,182.000 86.862 C 183.210 86.629,185.010 86.264,186.000 86.051 C 188.259 85.564,203.981 85.813,208.000 86.400 M221.600 220.002 C 221.600 221.739,214.068 226.899,209.000 228.635 C 202.458 230.876,191.460 229.931,186.738 226.722 C 186.154 226.325,185.557 226.000,185.410 226.000 C 184.441 226.000,178.400 220.830,178.400 220.000 C 178.400 219.738,185.851 219.600,200.000 219.600 C 214.204 219.600,221.600 219.738,221.600 220.002 \"\n          stroke=\"none\"\n          fill=\"#354c5c\"\n          fillRule=\"evenodd\"\n        />\n        <path\n          id=\"path3\"\n          d=\"M178.700 0.273 C 176.555 0.359,174.800 0.602,174.800 0.814 C 174.800 1.027,173.540 1.200,172.000 1.200 C 170.400 1.200,169.200 1.371,169.200 1.600 C 169.200 1.822,168.133 2.000,166.800 2.000 C 165.467 2.000,164.400 2.178,164.400 2.400 C 164.400 2.620,163.410 2.800,162.200 2.800 C 160.990 2.800,160.000 2.980,160.000 3.200 C 160.000 3.420,159.295 3.600,158.433 3.600 C 157.572 3.600,156.807 3.770,156.733 3.979 C 156.660 4.187,155.755 4.400,154.722 4.452 C 153.689 4.504,152.935 4.694,153.045 4.874 C 153.156 5.053,152.527 5.200,151.647 5.200 C 150.767 5.200,149.936 5.380,149.800 5.600 C 149.664 5.820,148.923 6.000,148.153 6.000 C 147.321 6.000,146.853 6.162,147.000 6.400 C 147.149 6.642,146.604 6.800,145.624 6.800 C 144.731 6.800,144.000 6.980,144.000 7.200 C 144.000 7.420,143.370 7.600,142.600 7.600 C 141.830 7.600,141.200 7.780,141.200 8.000 C 141.200 8.220,140.774 8.400,140.253 8.400 C 138.806 8.400,128.766 11.792,125.905 13.247 C 125.523 13.441,124.938 13.600,124.605 13.600 C 124.272 13.600,124.000 13.780,124.000 14.000 C 124.000 14.220,123.550 14.400,123.000 14.400 C 122.450 14.400,122.000 14.580,122.000 14.800 C 122.000 15.020,121.651 15.200,121.224 15.200 C 120.797 15.200,120.336 15.380,120.200 15.600 C 120.064 15.820,119.603 16.000,119.176 16.000 C 118.749 16.000,118.400 16.180,118.400 16.400 C 118.400 16.620,118.040 16.800,117.600 16.800 C 117.160 16.800,116.800 16.980,116.800 17.200 C 116.800 17.420,116.350 17.600,115.800 17.600 C 115.250 17.600,114.800 17.780,114.800 18.000 C 114.800 18.220,114.440 18.400,114.000 18.400 C 113.560 18.400,113.200 18.580,113.200 18.800 C 113.200 19.020,112.966 19.200,112.680 19.200 C 111.944 19.200,110.007 20.141,110.003 20.500 C 110.001 20.665,109.640 20.800,109.200 20.800 C 108.760 20.800,108.400 20.980,108.400 21.200 C 108.400 21.420,108.040 21.600,107.600 21.600 C 107.160 21.600,106.800 21.780,106.800 22.000 C 106.800 22.220,106.440 22.400,106.000 22.400 C 105.560 22.400,105.200 22.580,105.200 22.800 C 105.200 23.020,104.964 23.200,104.675 23.200 C 104.387 23.200,103.764 23.560,103.292 24.000 C 102.820 24.440,102.156 24.800,101.817 24.800 C 101.478 24.800,101.200 24.980,101.200 25.200 C 101.200 25.420,101.065 25.564,100.900 25.521 C 100.354 25.377,98.800 26.047,98.800 26.427 C 98.800 26.632,98.440 26.800,98.000 26.800 C 97.560 26.800,97.200 26.980,97.200 27.200 C 97.200 27.420,97.007 27.600,96.772 27.600 C 96.537 27.600,95.559 28.140,94.600 28.800 C 93.641 29.460,92.729 30.000,92.575 30.000 C 92.420 30.000,92.003 30.316,91.647 30.703 C 91.291 31.089,90.505 31.660,89.900 31.970 C 89.295 32.281,88.800 32.685,88.800 32.868 C 88.800 33.050,88.480 33.200,88.088 33.200 C 87.697 33.200,87.117 33.560,86.800 34.000 C 86.483 34.440,85.943 34.800,85.600 34.800 C 85.257 34.800,84.717 35.160,84.400 35.600 C 84.083 36.040,83.583 36.400,83.288 36.400 C 82.994 36.400,82.864 36.580,83.000 36.800 C 83.136 37.020,82.916 37.200,82.512 37.200 C 82.107 37.200,81.517 37.560,81.200 38.000 C 80.883 38.440,80.293 38.800,79.888 38.800 C 79.484 38.800,79.264 38.980,79.400 39.200 C 79.536 39.420,79.406 39.600,79.112 39.600 C 78.817 39.600,78.317 39.960,78.000 40.400 C 77.683 40.840,77.276 41.200,77.095 41.200 C 76.753 41.200,76.412 41.461,74.349 43.300 C 73.671 43.905,72.958 44.400,72.766 44.400 C 72.574 44.400,71.427 45.390,70.217 46.600 C 69.007 47.810,67.843 48.800,67.629 48.800 C 67.416 48.800,65.297 50.770,62.921 53.179 C 57.684 58.486,58.486 57.684,53.179 62.921 C 50.770 65.297,48.800 67.416,48.800 67.629 C 48.800 67.843,47.810 69.007,46.600 70.217 C 45.390 71.427,44.400 72.574,44.400 72.766 C 44.400 72.958,43.859 73.719,43.199 74.458 C 41.416 76.450,41.200 76.735,41.200 77.095 C 41.200 77.276,40.840 77.683,40.400 78.000 C 39.960 78.317,39.600 78.817,39.600 79.112 C 39.600 79.406,39.420 79.536,39.200 79.400 C 38.980 79.264,38.800 79.484,38.800 79.888 C 38.800 80.293,38.440 80.883,38.000 81.200 C 37.560 81.517,37.200 82.107,37.200 82.512 C 37.200 82.916,37.020 83.136,36.800 83.000 C 36.580 82.864,36.400 82.994,36.400 83.288 C 36.400 83.583,36.040 84.083,35.600 84.400 C 35.160 84.717,34.800 85.257,34.800 85.600 C 34.800 85.943,34.440 86.483,34.000 86.800 C 33.560 87.117,33.200 87.697,33.200 88.088 C 33.200 88.480,33.050 88.800,32.868 88.800 C 32.685 88.800,32.281 89.295,31.970 89.900 C 31.660 90.505,31.089 91.291,30.703 91.647 C 30.316 92.003,30.000 92.420,30.000 92.575 C 30.000 92.729,29.460 93.641,28.800 94.600 C 28.140 95.559,27.600 96.537,27.600 96.772 C 27.600 97.007,27.420 97.200,27.200 97.200 C 26.980 97.200,26.800 97.560,26.800 98.000 C 26.800 98.440,26.632 98.800,26.427 98.800 C 26.047 98.800,25.377 100.354,25.521 100.900 C 25.564 101.065,25.420 101.200,25.200 101.200 C 24.980 101.200,24.800 101.478,24.800 101.817 C 24.800 102.156,24.440 102.820,24.000 103.292 C 23.560 103.764,23.200 104.387,23.200 104.675 C 23.200 104.964,23.020 105.200,22.800 105.200 C 22.580 105.200,22.400 105.560,22.400 106.000 C 22.400 106.440,22.220 106.800,22.000 106.800 C 21.780 106.800,21.600 107.160,21.600 107.600 C 21.600 108.040,21.420 108.400,21.200 108.400 C 20.980 108.400,20.800 108.760,20.800 109.200 C 20.800 109.640,20.665 110.001,20.500 110.003 C 20.141 110.007,19.200 111.944,19.200 112.680 C 19.200 112.966,19.020 113.200,18.800 113.200 C 18.580 113.200,18.400 113.560,18.400 114.000 C 18.400 114.440,18.220 114.800,18.000 114.800 C 17.780 114.800,17.600 115.250,17.600 115.800 C 17.600 116.350,17.420 116.800,17.200 116.800 C 16.980 116.800,16.800 117.160,16.800 117.600 C 16.800 118.040,16.620 118.400,16.400 118.400 C 16.180 118.400,16.000 118.749,16.000 119.176 C 16.000 119.603,15.820 120.064,15.600 120.200 C 15.380 120.336,15.200 120.797,15.200 121.224 C 15.200 121.651,15.020 122.000,14.800 122.000 C 14.580 122.000,14.400 122.450,14.400 123.000 C 14.400 123.550,14.220 124.000,14.000 124.000 C 13.780 124.000,13.600 124.272,13.600 124.605 C 13.600 124.938,13.441 125.523,13.247 125.905 C 11.792 128.766,8.400 138.806,8.400 140.253 C 8.400 140.774,8.220 141.200,8.000 141.200 C 7.780 141.200,7.600 141.830,7.600 142.600 C 7.600 143.370,7.420 144.000,7.200 144.000 C 6.980 144.000,6.800 144.731,6.800 145.624 C 6.800 146.604,6.642 147.149,6.400 147.000 C 6.162 146.853,6.000 147.321,6.000 148.153 C 6.000 148.923,5.820 149.664,5.600 149.800 C 5.380 149.936,5.200 150.767,5.200 151.647 C 5.200 152.527,5.053 153.156,4.874 153.045 C 4.694 152.935,4.504 153.689,4.452 154.722 C 4.400 155.755,4.187 156.660,3.979 156.733 C 3.770 156.807,3.600 157.572,3.600 158.433 C 3.600 159.295,3.420 160.000,3.200 160.000 C 2.980 160.000,2.800 160.990,2.800 162.200 C 2.800 163.410,2.620 164.400,2.400 164.400 C 2.178 164.400,2.000 165.467,2.000 166.800 C 2.000 168.133,1.822 169.200,1.600 169.200 C 1.372 169.200,1.200 170.389,1.200 171.967 C 1.200 173.824,1.036 174.788,0.700 174.900 C -0.032 175.144,-0.032 224.856,0.700 225.100 C 1.036 225.212,1.200 226.176,1.200 228.033 C 1.200 229.611,1.372 230.800,1.600 230.800 C 1.822 230.800,2.000 231.867,2.000 233.200 C 2.000 234.533,2.178 235.600,2.400 235.600 C 2.620 235.600,2.800 236.590,2.800 237.800 C 2.800 239.010,2.980 240.000,3.200 240.000 C 3.420 240.000,3.600 240.705,3.600 241.567 C 3.600 242.428,3.770 243.193,3.979 243.267 C 4.187 243.340,4.400 244.245,4.452 245.278 C 4.504 246.311,4.694 247.065,4.874 246.955 C 5.053 246.844,5.200 247.473,5.200 248.353 C 5.200 249.233,5.380 250.064,5.600 250.200 C 5.820 250.336,6.000 251.077,6.000 251.847 C 6.000 252.679,6.162 253.147,6.400 253.000 C 6.642 252.851,6.800 253.396,6.800 254.376 C 6.800 255.269,6.980 256.000,7.200 256.000 C 7.420 256.000,7.600 256.630,7.600 257.400 C 7.600 258.170,7.780 258.800,8.000 258.800 C 8.220 258.800,8.400 259.241,8.400 259.781 C 8.400 260.320,9.136 262.885,10.036 265.481 C 10.935 268.076,11.766 270.605,11.882 271.100 C 11.998 271.595,12.252 272.000,12.447 272.000 C 12.641 272.000,12.800 272.439,12.800 272.976 C 12.800 273.513,12.980 274.064,13.200 274.200 C 13.420 274.336,13.600 274.797,13.600 275.224 C 13.600 275.651,13.780 276.000,14.000 276.000 C 14.220 276.000,14.400 276.450,14.400 277.000 C 14.400 277.550,14.580 278.000,14.800 278.000 C 15.020 278.000,15.200 278.349,15.200 278.776 C 15.200 279.203,15.380 279.664,15.600 279.800 C 15.820 279.936,16.000 280.397,16.000 280.824 C 16.000 281.251,16.180 281.600,16.400 281.600 C 16.620 281.600,16.800 281.960,16.800 282.400 C 16.800 282.840,16.980 283.200,17.200 283.200 C 17.420 283.200,17.600 283.650,17.600 284.200 C 17.600 284.750,17.780 285.200,18.000 285.200 C 18.220 285.200,18.400 285.560,18.400 286.000 C 18.400 286.440,18.580 286.800,18.800 286.800 C 19.020 286.800,19.200 287.034,19.200 287.320 C 19.200 288.056,20.141 289.993,20.500 289.997 C 20.665 289.999,20.800 290.360,20.800 290.800 C 20.800 291.240,20.980 291.600,21.200 291.600 C 21.420 291.600,21.600 291.960,21.600 292.400 C 21.600 292.840,21.780 293.200,22.000 293.200 C 22.220 293.200,22.400 293.560,22.400 294.000 C 22.400 294.440,22.580 294.800,22.800 294.800 C 23.020 294.800,23.200 295.036,23.200 295.325 C 23.200 295.613,23.560 296.236,24.000 296.708 C 24.440 297.180,24.800 297.844,24.800 298.183 C 24.800 298.522,24.980 298.800,25.200 298.800 C 25.420 298.800,25.564 298.935,25.521 299.100 C 25.377 299.646,26.047 301.200,26.427 301.200 C 26.632 301.200,26.800 301.560,26.800 302.000 C 26.800 302.440,26.980 302.800,27.200 302.800 C 27.420 302.800,27.600 302.993,27.600 303.228 C 27.600 303.463,28.140 304.441,28.800 305.400 C 29.460 306.359,30.000 307.271,30.000 307.425 C 30.000 307.580,30.316 307.997,30.703 308.353 C 31.089 308.709,31.660 309.495,31.970 310.100 C 32.281 310.705,32.685 311.200,32.868 311.200 C 33.050 311.200,33.200 311.520,33.200 311.912 C 33.200 312.303,33.560 312.883,34.000 313.200 C 34.440 313.517,34.800 314.057,34.800 314.400 C 34.800 314.743,35.160 315.283,35.600 315.600 C 36.040 315.917,36.400 316.417,36.400 316.712 C 36.400 317.006,36.580 317.136,36.800 317.000 C 37.020 316.864,37.200 317.084,37.200 317.488 C 37.200 317.893,37.560 318.483,38.000 318.800 C 38.440 319.117,38.800 319.707,38.800 320.112 C 38.800 320.516,38.980 320.736,39.200 320.600 C 39.420 320.464,39.600 320.594,39.600 320.888 C 39.600 321.183,39.960 321.683,40.400 322.000 C 40.840 322.317,41.200 322.724,41.200 322.905 C 41.200 323.086,41.383 323.451,41.607 323.717 C 41.831 323.983,42.361 324.620,42.784 325.134 C 43.841 326.418,44.671 326.026,46.600 323.329 C 49.896 318.720,59.624 308.610,65.618 303.563 C 68.220 301.372,79.522 292.800,79.809 292.800 C 79.919 292.800,81.222 292.019,82.705 291.065 C 88.978 287.028,90.090 286.351,92.874 284.872 C 97.233 282.556,105.204 278.556,106.800 277.883 C 107.570 277.559,109.053 276.912,110.096 276.447 C 111.138 275.981,112.078 275.600,112.184 275.600 C 112.290 275.600,113.408 275.128,114.668 274.552 C 119.190 272.483,136.278 266.820,141.900 265.526 C 143.286 265.208,143.600 264.967,143.600 264.227 C 143.600 263.728,143.759 262.798,143.953 262.160 C 144.148 261.522,144.529 260.190,144.801 259.200 C 146.135 254.339,149.393 249.388,152.750 247.120 C 153.767 246.433,154.646 245.839,154.701 245.801 C 154.757 245.762,155.071 243.766,155.399 241.365 C 155.727 238.964,156.169 236.280,156.381 235.400 C 156.714 234.022,156.645 233.624,155.884 232.531 C 151.704 226.529,149.949 223.862,148.834 221.816 C 148.119 220.505,147.189 218.947,146.767 218.354 C 146.345 217.761,146.000 217.160,146.000 217.017 C 146.000 216.874,145.567 216.120,145.037 215.341 C 144.508 214.562,142.941 211.376,141.555 208.262 C 138.087 200.469,138.042 200.399,136.084 199.633 C 129.139 196.918,119.822 185.159,117.834 176.600 C 115.692 167.379,117.167 160.877,122.115 157.734 C 123.018 157.160,123.516 156.588,123.348 156.316 C 123.194 156.066,122.917 155.173,122.734 154.331 C 122.550 153.489,122.209 152.035,121.975 151.100 C 121.422 148.890,120.648 144.737,119.571 138.200 C 117.748 127.144,117.740 111.290,119.553 103.200 C 119.775 102.210,120.119 100.680,120.318 99.800 C 120.517 98.920,120.979 97.497,121.345 96.639 C 122.661 93.550,121.828 94.119,117.600 99.194 C 114.290 103.167,114.069 103.401,113.846 103.178 C 113.614 102.948,114.040 100.293,114.804 97.200 C 115.049 96.210,115.351 94.860,115.475 94.200 C 115.599 93.540,115.825 92.820,115.978 92.600 C 116.131 92.380,116.500 91.390,116.798 90.400 C 117.095 89.410,117.488 88.429,117.670 88.220 C 117.851 88.011,118.000 87.514,118.000 87.115 C 118.000 86.716,118.166 86.077,118.368 85.695 C 118.570 85.313,119.147 83.920,119.650 82.600 C 125.767 66.532,138.781 51.090,154.600 41.127 C 157.215 39.481,158.443 38.849,165.200 35.675 C 166.630 35.004,169.600 33.879,171.800 33.176 C 174.000 32.473,176.160 31.761,176.600 31.595 C 177.798 31.140,180.310 30.515,183.000 30.002 C 184.320 29.750,186.030 29.387,186.800 29.195 C 189.630 28.489,193.133 28.365,198.600 28.775 C 203.975 29.179,205.810 29.437,210.200 30.404 C 211.300 30.646,212.787 30.944,213.504 31.066 C 214.221 31.188,214.906 31.449,215.027 31.644 C 215.148 31.840,215.619 32.000,216.072 32.000 C 216.526 32.000,218.806 32.939,221.139 34.087 C 229.660 38.280,233.778 43.838,234.264 51.800 C 234.483 55.390,234.597 55.712,235.491 55.258 C 236.743 54.623,239.026 54.000,240.105 54.000 C 240.681 54.000,241.252 53.839,241.374 53.642 C 242.270 52.192,257.343 51.839,263.600 53.122 C 270.984 54.635,278.600 60.565,281.937 67.400 C 283.580 70.764,284.400 72.820,284.400 73.572 C 284.400 74.001,284.560 74.452,284.756 74.573 C 284.951 74.694,285.214 75.379,285.340 76.096 C 285.465 76.813,285.796 78.660,286.075 80.200 C 286.767 84.012,286.755 102.314,286.058 106.600 C 285.533 109.830,285.184 112.049,284.454 116.800 C 283.944 120.124,283.624 121.601,283.200 122.600 C 283.013 123.040,282.757 123.895,282.630 124.500 C 282.504 125.105,282.296 126.095,282.170 126.700 C 282.043 127.305,281.787 128.160,281.600 128.600 C 281.413 129.040,281.169 129.850,281.058 130.400 C 280.947 130.950,280.646 132.120,280.391 133.000 C 280.135 133.880,279.832 135.187,279.719 135.904 C 279.605 136.621,279.351 137.306,279.156 137.427 C 278.960 137.548,278.800 138.256,278.800 139.000 C 278.800 139.744,278.640 140.452,278.444 140.573 C 278.249 140.694,277.992 141.379,277.873 142.096 C 277.630 143.567,277.032 146.038,275.284 152.800 C 274.444 156.044,274.473 156.400,275.568 156.400 C 277.465 156.400,280.475 159.250,281.904 162.400 C 286.744 173.064,276.157 194.871,263.804 199.686 C 261.967 200.402,261.883 200.537,258.445 208.262 C 257.059 211.376,255.492 214.562,254.963 215.341 C 254.433 216.120,254.000 216.874,254.000 217.017 C 254.000 217.160,253.655 217.761,253.233 218.354 C 252.811 218.947,251.881 220.505,251.166 221.816 C 250.051 223.862,248.296 226.529,244.116 232.531 C 243.355 233.624,243.286 234.022,243.619 235.400 C 243.831 236.280,244.273 238.964,244.601 241.365 C 244.929 243.766,245.243 245.762,245.299 245.801 C 245.354 245.839,246.233 246.433,247.250 247.120 C 250.607 249.388,253.865 254.339,255.199 259.200 C 255.471 260.190,255.852 261.522,256.047 262.160 C 256.241 262.798,256.400 263.730,256.400 264.233 C 256.400 264.842,256.700 265.226,257.300 265.387 C 260.184 266.159,261.509 266.526,262.400 266.800 C 262.950 266.969,264.210 267.327,265.200 267.595 C 268.089 268.378,282.041 273.175,283.896 274.024 C 284.828 274.451,285.685 274.800,285.800 274.800 C 285.915 274.800,286.817 275.160,287.804 275.600 C 288.792 276.040,290.408 276.760,291.396 277.200 C 292.383 277.640,293.311 278.000,293.458 278.000 C 294.045 278.000,308.141 285.314,311.458 287.340 C 322.809 294.271,323.868 294.994,331.016 300.691 C 338.370 306.550,348.962 317.257,353.284 323.200 C 355.340 326.026,356.153 326.426,357.216 325.134 C 357.639 324.620,358.169 323.983,358.393 323.717 C 358.617 323.451,358.800 323.086,358.800 322.905 C 358.800 322.724,359.160 322.317,359.600 322.000 C 360.040 321.683,360.400 321.183,360.400 320.888 C 360.400 320.594,360.580 320.464,360.800 320.600 C 361.020 320.736,361.200 320.516,361.200 320.112 C 361.200 319.707,361.560 319.117,362.000 318.800 C 362.440 318.483,362.800 317.893,362.800 317.488 C 362.800 317.084,362.980 316.864,363.200 317.000 C 363.420 317.136,363.600 317.006,363.600 316.712 C 363.600 316.417,363.960 315.917,364.400 315.600 C 364.840 315.283,365.200 314.743,365.200 314.400 C 365.200 314.057,365.560 313.517,366.000 313.200 C 366.440 312.883,366.800 312.303,366.800 311.912 C 366.800 311.520,366.950 311.200,367.132 311.200 C 367.315 311.200,367.719 310.705,368.030 310.100 C 368.340 309.495,368.911 308.709,369.297 308.353 C 369.684 307.997,370.000 307.580,370.000 307.425 C 370.000 307.271,370.540 306.359,371.200 305.400 C 371.860 304.441,372.400 303.463,372.400 303.228 C 372.400 302.993,372.580 302.800,372.800 302.800 C 373.020 302.800,373.200 302.440,373.200 302.000 C 373.200 301.560,373.368 301.200,373.573 301.200 C 373.953 301.200,374.623 299.646,374.479 299.100 C 374.436 298.935,374.580 298.800,374.800 298.800 C 375.020 298.800,375.200 298.522,375.200 298.183 C 375.200 297.844,375.560 297.180,376.000 296.708 C 376.440 296.236,376.800 295.613,376.800 295.325 C 376.800 295.036,376.980 294.800,377.200 294.800 C 377.420 294.800,377.600 294.440,377.600 294.000 C 377.600 293.560,377.780 293.200,378.000 293.200 C 378.220 293.200,378.400 292.840,378.400 292.400 C 378.400 291.960,378.580 291.600,378.800 291.600 C 379.020 291.600,379.200 291.240,379.200 290.800 C 379.200 290.360,379.335 289.999,379.500 289.997 C 379.859 289.993,380.800 288.056,380.800 287.320 C 380.800 287.034,380.980 286.800,381.200 286.800 C 381.420 286.800,381.600 286.440,381.600 286.000 C 381.600 285.560,381.780 285.200,382.000 285.200 C 382.220 285.200,382.400 284.750,382.400 284.200 C 382.400 283.650,382.580 283.200,382.800 283.200 C 383.020 283.200,383.200 282.840,383.200 282.400 C 383.200 281.960,383.380 281.600,383.600 281.600 C 383.820 281.600,384.000 281.251,384.000 280.824 C 384.000 280.397,384.180 279.936,384.400 279.800 C 384.620 279.664,384.800 279.203,384.800 278.776 C 384.800 278.349,384.980 278.000,385.200 278.000 C 385.420 278.000,385.600 277.550,385.600 277.000 C 385.600 276.450,385.780 276.000,386.000 276.000 C 386.220 276.000,386.400 275.728,386.400 275.395 C 386.400 275.062,386.559 274.477,386.753 274.095 C 388.208 271.234,391.600 261.194,391.600 259.747 C 391.600 259.226,391.780 258.800,392.000 258.800 C 392.220 258.800,392.400 258.170,392.400 257.400 C 392.400 256.630,392.580 256.000,392.800 256.000 C 393.020 256.000,393.200 255.269,393.200 254.376 C 393.200 253.396,393.358 252.851,393.600 253.000 C 393.838 253.147,394.000 252.679,394.000 251.847 C 394.000 251.077,394.180 250.336,394.400 250.200 C 394.620 250.064,394.800 249.233,394.800 248.353 C 394.800 247.473,394.947 246.844,395.126 246.955 C 395.306 247.065,395.496 246.311,395.548 245.278 C 395.600 244.245,395.813 243.340,396.021 243.267 C 396.230 243.193,396.400 242.428,396.400 241.567 C 396.400 240.705,396.580 240.000,396.800 240.000 C 397.020 240.000,397.200 239.010,397.200 237.800 C 397.200 236.590,397.380 235.600,397.600 235.600 C 397.822 235.600,398.000 234.533,398.000 233.200 C 398.000 231.867,398.178 230.800,398.400 230.800 C 398.628 230.800,398.800 229.611,398.800 228.033 C 398.800 226.176,398.964 225.212,399.300 225.100 C 399.693 224.969,399.800 219.591,399.800 200.000 C 399.800 180.409,399.693 175.031,399.300 174.900 C 398.964 174.788,398.800 173.824,398.800 171.967 C 398.800 170.389,398.628 169.200,398.400 169.200 C 398.178 169.200,398.000 168.133,398.000 166.800 C 398.000 165.467,397.822 164.400,397.600 164.400 C 397.380 164.400,397.200 163.410,397.200 162.200 C 397.200 160.990,397.020 160.000,396.800 160.000 C 396.580 160.000,396.400 159.295,396.400 158.433 C 396.400 157.572,396.230 156.807,396.021 156.733 C 395.813 156.660,395.600 155.755,395.548 154.722 C 395.496 153.689,395.306 152.935,395.126 153.045 C 394.947 153.156,394.800 152.527,394.800 151.647 C 394.800 150.767,394.620 149.936,394.400 149.800 C 394.180 149.664,394.000 148.923,394.000 148.153 C 394.000 147.321,393.838 146.853,393.600 147.000 C 393.358 147.149,393.200 146.604,393.200 145.624 C 393.200 144.731,393.020 144.000,392.800 144.000 C 392.580 144.000,392.400 143.370,392.400 142.600 C 392.400 141.830,392.220 141.200,392.000 141.200 C 391.780 141.200,391.600 140.774,391.600 140.253 C 391.600 138.806,388.208 128.766,386.753 125.905 C 386.559 125.523,386.400 124.938,386.400 124.605 C 386.400 124.272,386.220 124.000,386.000 124.000 C 385.780 124.000,385.600 123.550,385.600 123.000 C 385.600 122.450,385.420 122.000,385.200 122.000 C 384.980 122.000,384.800 121.651,384.800 121.224 C 384.800 120.797,384.620 120.336,384.400 120.200 C 384.180 120.064,384.000 119.603,384.000 119.176 C 384.000 118.749,383.820 118.400,383.600 118.400 C 383.380 118.400,383.200 118.040,383.200 117.600 C 383.200 117.160,383.020 116.800,382.800 116.800 C 382.580 116.800,382.400 116.350,382.400 115.800 C 382.400 115.250,382.220 114.800,382.000 114.800 C 381.780 114.800,381.600 114.440,381.600 114.000 C 381.600 113.560,381.420 113.200,381.200 113.200 C 380.980 113.200,380.800 112.966,380.800 112.680 C 380.800 111.944,379.859 110.007,379.500 110.003 C 379.335 110.001,379.200 109.640,379.200 109.200 C 379.200 108.760,379.020 108.400,378.800 108.400 C 378.580 108.400,378.400 108.040,378.400 107.600 C 378.400 107.160,378.220 106.800,378.000 106.800 C 377.780 106.800,377.600 106.440,377.600 106.000 C 377.600 105.560,377.420 105.200,377.200 105.200 C 376.980 105.200,376.800 104.964,376.800 104.675 C 376.800 104.387,376.440 103.764,376.000 103.292 C 375.560 102.820,375.200 102.156,375.200 101.817 C 375.200 101.478,375.020 101.200,374.800 101.200 C 374.580 101.200,374.436 101.065,374.479 100.900 C 374.623 100.354,373.953 98.800,373.573 98.800 C 373.368 98.800,373.200 98.440,373.200 98.000 C 373.200 97.560,373.020 97.200,372.800 97.200 C 372.580 97.200,372.400 97.007,372.400 96.772 C 372.400 96.537,371.860 95.559,371.200 94.600 C 370.540 93.641,370.000 92.729,370.000 92.575 C 370.000 92.420,369.684 92.003,369.297 91.647 C 368.911 91.291,368.340 90.505,368.030 89.900 C 367.719 89.295,367.315 88.800,367.132 88.800 C 366.950 88.800,366.800 88.480,366.800 88.088 C 366.800 87.697,366.440 87.117,366.000 86.800 C 365.560 86.483,365.200 85.943,365.200 85.600 C 365.200 85.257,364.840 84.717,364.400 84.400 C 363.960 84.083,363.600 83.583,363.600 83.288 C 363.600 82.994,363.420 82.864,363.200 83.000 C 362.980 83.136,362.800 82.916,362.800 82.512 C 362.800 82.107,362.440 81.517,362.000 81.200 C 361.560 80.883,361.200 80.293,361.200 79.888 C 361.200 79.484,361.020 79.264,360.800 79.400 C 360.580 79.536,360.400 79.406,360.400 79.112 C 360.400 78.817,360.040 78.317,359.600 78.000 C 359.160 77.683,358.800 77.276,358.800 77.095 C 358.800 76.735,358.584 76.450,356.801 74.458 C 356.141 73.719,355.600 72.958,355.600 72.766 C 355.600 72.574,354.610 71.427,353.400 70.217 C 352.190 69.007,351.200 67.843,351.200 67.629 C 351.200 67.416,349.230 65.297,346.821 62.921 C 341.514 57.684,342.316 58.486,337.079 53.179 C 334.703 50.770,332.584 48.800,332.371 48.800 C 332.157 48.800,330.993 47.810,329.783 46.600 C 328.573 45.390,327.426 44.400,327.234 44.400 C 327.042 44.400,326.329 43.905,325.651 43.300 C 323.588 41.461,323.247 41.200,322.905 41.200 C 322.724 41.200,322.317 40.840,322.000 40.400 C 321.683 39.960,321.183 39.600,320.888 39.600 C 320.594 39.600,320.464 39.420,320.600 39.200 C 320.736 38.980,320.516 38.800,320.112 38.800 C 319.707 38.800,319.117 38.440,318.800 38.000 C 318.483 37.560,317.893 37.200,317.488 37.200 C 317.084 37.200,316.864 37.020,317.000 36.800 C 317.136 36.580,317.006 36.400,316.712 36.400 C 316.417 36.400,315.917 36.040,315.600 35.600 C 315.283 35.160,314.743 34.800,314.400 34.800 C 314.057 34.800,313.517 34.440,313.200 34.000 C 312.883 33.560,312.303 33.200,311.912 33.200 C 311.520 33.200,311.200 33.050,311.200 32.868 C 311.200 32.685,310.705 32.281,310.100 31.970 C 309.495 31.660,308.709 31.089,308.353 30.703 C 307.997 30.316,307.580 30.000,307.425 30.000 C 307.271 30.000,306.359 29.460,305.400 28.800 C 304.441 28.140,303.463 27.600,303.228 27.600 C 302.993 27.600,302.800 27.420,302.800 27.200 C 302.800 26.980,302.440 26.800,302.000 26.800 C 301.560 26.800,301.200 26.632,301.200 26.427 C 301.200 26.047,299.646 25.377,299.100 25.521 C 298.935 25.564,298.800 25.420,298.800 25.200 C 298.800 24.980,298.522 24.800,298.183 24.800 C 297.844 24.800,297.180 24.440,296.708 24.000 C 296.236 23.560,295.613 23.200,295.325 23.200 C 295.036 23.200,294.800 23.020,294.800 22.800 C 294.800 22.580,294.440 22.400,294.000 22.400 C 293.560 22.400,293.200 22.220,293.200 22.000 C 293.200 21.780,292.840 21.600,292.400 21.600 C 291.960 21.600,291.600 21.420,291.600 21.200 C 291.600 20.980,291.240 20.800,290.800 20.800 C 290.360 20.800,289.999 20.665,289.997 20.500 C 289.993 20.141,288.056 19.200,287.320 19.200 C 287.034 19.200,286.800 19.020,286.800 18.800 C 286.800 18.580,286.440 18.400,286.000 18.400 C 285.560 18.400,285.200 18.220,285.200 18.000 C 285.200 17.780,284.750 17.600,284.200 17.600 C 283.650 17.600,283.200 17.420,283.200 17.200 C 283.200 16.980,282.840 16.800,282.400 16.800 C 281.960 16.800,281.600 16.620,281.600 16.400 C 281.600 16.180,281.251 16.000,280.824 16.000 C 280.397 16.000,279.936 15.820,279.800 15.600 C 279.664 15.380,279.203 15.200,278.776 15.200 C 278.349 15.200,278.000 15.020,278.000 14.800 C 278.000 14.580,277.550 14.400,277.000 14.400 C 276.450 14.400,276.000 14.220,276.000 14.000 C 276.000 13.780,275.651 13.600,275.224 13.600 C 274.797 13.600,274.336 13.420,274.200 13.200 C 274.064 12.980,273.513 12.800,272.976 12.800 C 272.439 12.800,272.000 12.641,272.000 12.447 C 272.000 12.252,271.595 11.998,271.100 11.882 C 270.605 11.766,268.076 10.935,265.481 10.036 C 262.885 9.136,260.320 8.400,259.781 8.400 C 259.241 8.400,258.800 8.220,258.800 8.000 C 258.800 7.780,258.170 7.600,257.400 7.600 C 256.630 7.600,256.000 7.420,256.000 7.200 C 256.000 6.980,255.269 6.800,254.376 6.800 C 253.396 6.800,252.851 6.642,253.000 6.400 C 253.147 6.162,252.679 6.000,251.847 6.000 C 251.077 6.000,250.336 5.820,250.200 5.600 C 250.064 5.380,249.233 5.200,248.353 5.200 C 247.473 5.200,246.844 5.053,246.955 4.874 C 247.065 4.694,246.311 4.504,245.278 4.452 C 244.245 4.400,243.340 4.187,243.267 3.979 C 243.193 3.770,242.428 3.600,241.567 3.600 C 240.705 3.600,240.000 3.420,240.000 3.200 C 240.000 2.980,239.010 2.800,237.800 2.800 C 236.590 2.800,235.600 2.620,235.600 2.400 C 235.600 2.178,234.533 2.000,233.200 2.000 C 231.867 2.000,230.800 1.822,230.800 1.600 C 230.800 1.372,229.611 1.200,228.033 1.200 C 226.238 1.200,225.211 1.032,225.107 0.720 C 224.948 0.244,188.291 -0.109,178.700 0.273 M169.200 398.400 C 169.200 398.620,169.470 398.800,169.800 398.800 C 170.130 398.800,170.400 398.620,170.400 398.400 C 170.400 398.180,170.130 398.000,169.800 398.000 C 169.470 398.000,169.200 398.180,169.200 398.400 M229.600 398.400 C 229.600 398.620,229.870 398.800,230.200 398.800 C 230.530 398.800,230.800 398.620,230.800 398.400 C 230.800 398.180,230.530 398.000,230.200 398.000 C 229.870 398.000,229.600 398.180,229.600 398.400 \"\n          stroke=\"none\"\n          fill=\"transparent\"\n          fillRule=\"evenodd\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Profile);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Eyes = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0, 0, 400,400\"\n    >\n      <g>\n        <path d=\"M10.938 41.016 L 10.938 71.094 23.047 71.094 L 35.156 71.094 35.156 53.125 L 35.156 35.156 53.125 35.156 L 71.094 35.156 71.094 23.047 L 71.094 10.938 41.016 10.938 L 10.938 10.938 10.938 41.016 M328.906 23.047 L 328.906 35.156 346.875 35.156 L 364.844 35.156 364.844 53.125 L 364.844 71.094 376.953 71.094 L 389.063 71.094 389.063 41.016 L 389.063 10.938 358.984 10.938 L 328.906 10.938 328.906 23.047 M183.665 64.908 C 107.287 70.762,40.558 115.919,6.557 184.760 C -1.423 200.917,-1.423 199.083,6.557 215.240 C 85.679 375.437,314.147 375.437,393.430 215.240 C 401.425 199.085,401.424 200.919,393.443 184.760 C 354.245 105.396,271.585 58.170,183.665 64.908 M219.141 120.202 C 281.380 135.716,302.927 212.636,257.732 257.969 C 221.269 294.544,159.769 288.177,131.564 244.907 C 98.547 194.254,128.873 128.016,189.453 118.470 C 194.886 117.614,212.995 118.670,219.141 120.202 M190.493 141.371 C 146.520 149.439,126.256 198.540,151.949 234.766 C 177.853 271.290,235.337 265.688,253.861 224.835 C 273.324 181.910,236.181 132.988,190.493 141.371 M206.407 165.704 C 233.876 171.415,244.128 204.785,224.457 224.457 C 204.336 244.577,170.749 233.641,165.542 205.273 C 161.385 182.629,183.732 160.990,206.407 165.704 M195.703 188.674 C 184.755 192.547,185.604 208.684,196.916 211.730 C 208.695 214.902,217.183 200.115,208.542 191.475 C 204.872 187.805,200.720 186.899,195.703 188.674 M10.938 358.984 L 10.938 389.063 41.016 389.063 L 71.094 389.063 71.094 376.953 L 71.094 364.844 53.125 364.844 L 35.156 364.844 35.156 346.875 L 35.156 328.906 23.047 328.906 L 10.938 328.906 10.938 358.984 M364.844 346.875 L 364.844 364.844 346.875 364.844 L 328.906 364.844 328.906 376.953 L 328.906 389.063 358.984 389.063 L 389.063 389.063 389.063 358.984 L 389.063 328.906 376.953 328.906 L 364.844 328.906 364.844 346.875 \" />\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Eyes);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst MagicMan = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0, 0, 400,400\"\n    >\n      <g id=\"svgg\">\n        <path d=\"M367.432 1.621 C 363.157 3.737,362.183 5.127,350.932 25.188 C 339.781 45.071,340.620 42.025,344.861 47.232 C 352.196 56.237,355.821 67.430,355.311 79.501 C 355.081 84.940,355.225 86.491,355.892 85.751 C 357.185 84.315,389.710 26.293,391.139 22.872 C 397.058 8.706,381.426 -5.307,367.432 1.621 M299.219 39.937 C 276.984 43.517,262.743 68.245,270.290 90.171 C 279.480 116.870,314.340 124.435,333.863 103.967 C 359.477 77.113,336.146 33.992,299.219 39.937 M233.203 101.088 C 231.484 101.629,229.199 102.543,228.125 103.120 C 226.438 104.027,45.445 217.362,20.165 233.341 C 8.271 240.860,4.657 247.821,8.817 255.198 C 11.658 260.238,74.315 327.254,77.020 328.147 C 80.800 329.395,87.108 328.720,89.707 326.791 C 91.752 325.272,265.625 112.004,265.625 111.014 C 265.625 109.969,250.218 101.618,246.865 100.846 C 242.247 99.782,237.062 99.874,233.203 101.088 M187.110 225.082 C 122.951 304.024,97.882 334.332,95.360 336.003 C 90.511 339.214,86.587 340.095,79.311 339.605 L 73.076 339.185 59.389 353.240 C 42.788 370.287,41.162 372.843,41.536 381.311 C 42.030 392.527,48.746 399.318,59.897 399.882 C 69.948 400.389,68.549 401.560,114.453 354.267 L 155.078 312.414 174.467 282.574 C 185.131 266.162,194.272 252.663,194.780 252.577 C 195.288 252.490,197.791 253.721,200.343 255.311 L 204.982 258.203 209.500 286.328 C 211.984 301.797,214.027 314.867,214.040 315.373 C 214.052 315.879,203.024 325.449,189.532 336.641 C 163.044 358.613,160.073 361.512,158.579 366.850 C 154.049 383.028,170.609 397.515,185.767 390.635 C 188.986 389.174,246.917 341.834,250.654 337.610 C 256.531 330.968,256.583 328.360,251.479 296.094 L 247.462 270.703 256.164 256.090 C 260.950 248.053,265.056 240.982,265.288 240.377 C 265.632 239.480,263.938 239.207,256.097 238.896 C 238.333 238.194,228.711 230.152,228.711 216.009 C 228.711 211.323,243.536 170.842,244.354 173.295 C 244.502 173.741,243.516 181.778,242.162 191.154 C 238.412 217.123,239.382 222.400,248.733 226.915 C 253.348 229.144,318.868 232.181,325.092 230.455 C 341.647 225.864,341.294 201.984,324.609 197.763 C 322.891 197.329,311.582 196.726,299.480 196.425 C 287.378 196.124,277.149 195.662,276.750 195.399 C 276.318 195.115,276.868 188.916,278.110 180.078 L 280.197 165.234 280.810 175.586 L 281.424 185.938 287.782 185.948 C 291.279 185.954,294.844 186.142,295.703 186.367 C 297.481 186.830,310.038 166.494,311.646 160.547 C 313.675 153.046,311.764 142.803,307.361 137.570 C 304.893 134.637,304.571 135.161,311.719 130.469 C 315.156 128.212,317.969 126.322,317.969 126.269 C 317.969 126.215,313.135 126.172,307.227 126.172 C 294.894 126.172,289.990 124.924,280.992 119.498 C 278.173 117.797,275.760 116.418,275.629 116.433 C 275.498 116.447,235.664 165.339,187.110 225.082 \" />\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(MagicMan);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst Matrix = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0, 0, 400,400\"\n    >\n      <g>\n        <path d=\"M31.296 9.028 C 18.220 11.863,8.095 20.437,2.287 33.594 C -0.480 39.863,-1.062 79.816,1.491 88.222 C 13.401 127.433,70.821 124.690,79.338 84.502 C 80.684 78.154,80.885 47.897,79.628 40.964 C 75.608 18.789,53.537 4.205,31.296 9.028 M115.900 8.627 C 112.752 9.589,108.805 14.072,108.206 17.366 C 106.751 25.375,108.198 101.442,109.847 103.654 C 114.903 110.435,124.940 110.435,129.996 103.654 C 131.614 101.485,131.644 100.763,131.855 59.072 L 132.070 16.695 130.293 14.083 C 126.750 8.877,121.544 6.904,115.900 8.627 M191.406 9.036 C 177.182 12.117,165.680 22.694,161.306 36.719 C 159.588 42.224,158.759 71.563,160.050 81.154 C 166.320 127.747,233.680 127.747,239.950 81.154 C 241.241 71.563,240.412 42.224,238.694 36.719 C 232.388 16.502,212.012 4.574,191.406 9.036 M275.352 8.869 C 272.608 10.113,268.942 14.182,268.331 16.662 C 266.879 22.560,268.396 101.498,270.004 103.654 C 275.060 110.436,285.098 110.435,290.153 103.654 C 292.708 100.225,292.739 17.002,290.186 13.582 C 286.517 8.667,280.214 6.665,275.352 8.869 M354.297 8.358 C 337.867 10.540,323.359 24.484,320.372 40.964 C 319.115 47.897,319.316 78.154,320.662 84.502 C 329.151 124.557,386.399 127.463,398.449 88.451 C 400.423 82.058,400.766 44.743,398.914 37.788 C 393.775 18.489,374.374 5.692,354.297 8.358 M48.158 34.790 C 54.945 38.767,55.820 41.596,56.113 60.506 C 56.399 78.972,55.927 81.864,51.852 86.625 C 44.668 95.018,31.783 93.612,26.020 83.807 L 23.828 80.078 23.828 62.500 C 23.828 42.970,24.079 41.776,29.229 36.784 C 34.479 31.696,41.599 30.946,48.158 34.790 M206.866 33.899 C 209.637 35.332,213.077 38.784,214.721 41.781 C 216.934 45.814,216.624 78.948,214.334 83.203 C 207.842 95.265,192.153 95.265,185.668 83.203 C 183.875 79.869,182.778 56.658,183.965 47.157 C 185.370 35.899,197.337 28.971,206.866 33.899 M364.313 32.869 C 374.067 35.577,376.172 40.836,376.172 62.500 L 376.172 80.078 373.980 83.807 C 366.625 96.320,348.455 94.092,344.565 80.200 C 342.566 73.058,343.790 44.736,346.282 40.498 C 350.149 33.920,357.262 30.911,364.313 32.869 M35.156 146.645 C 33.334 147.312,30.433 150.175,29.223 152.500 C 27.330 156.138,27.626 236.959,29.546 240.637 C 34.109 249.382,47.554 248.266,51.145 238.845 C 53.096 233.726,52.611 155.499,50.605 151.833 C 48.058 147.180,40.572 144.666,35.156 146.645 M106.853 147.926 C 93.608 152.440,83.028 164.519,80.481 178.036 C 79.452 183.496,79.452 216.504,80.481 221.964 C 87.475 259.075,139.993 265.786,156.204 231.641 C 162.047 219.334,162.047 180.666,156.204 168.359 C 147.761 150.574,125.783 141.474,106.853 147.926 M193.470 147.576 C 188.047 151.151,188.292 148.861,188.289 196.094 C 188.287 237.418,188.333 238.748,189.863 241.256 C 194.124 248.246,205.876 248.246,210.137 241.256 C 212.513 237.359,212.604 154.874,210.236 151.282 C 207.831 147.634,204.806 146.104,200.000 146.104 C 197.102 146.104,194.976 146.583,193.470 147.576 M267.169 147.872 C 253.771 152.440,243.493 163.826,240.707 177.187 C 238.014 190.099,239.906 223.447,243.796 231.641 C 257.964 261.485,301.846 261.485,316.112 231.641 C 319.802 223.921,320.313 220.077,320.313 200.000 C 320.313 179.923,319.802 176.079,316.112 168.359 C 307.532 150.410,286.071 141.427,267.169 147.872 M352.264 147.867 C 346.685 151.594,346.832 150.200,347.061 197.014 C 347.288 243.549,346.958 240.628,352.460 244.736 C 357.589 248.565,366.113 246.540,369.387 240.714 C 371.790 236.439,372.093 157.073,369.725 152.359 C 367.694 148.316,363.884 146.094,358.984 146.094 C 356.058 146.094,354.175 146.591,352.264 147.867 M128.578 172.852 C 135.603 177.602,136.053 179.351,135.780 200.840 L 135.547 219.260 133.416 222.477 C 125.978 233.708,109.055 231.550,104.795 218.829 C 103.598 215.252,103.598 184.748,104.795 181.171 C 108.137 171.189,119.989 167.043,128.578 172.852 M289.155 173.071 C 295.316 177.423,295.703 179.014,295.703 200.000 C 295.703 220.586,295.328 222.340,290.069 226.351 C 282.012 232.497,270.567 230.044,265.880 221.166 C 263.089 215.879,263.078 184.159,265.865 178.834 C 270.290 170.381,281.441 167.621,289.155 173.071 M29.959 284.703 C 16.837 287.886,5.462 298.704,1.491 311.778 C -1.065 320.194,-0.480 360.142,2.291 366.406 C 18.774 403.666,72.465 398.549,79.628 359.036 C 80.885 352.103,80.684 321.846,79.338 315.498 C 74.616 293.218,52.280 279.289,29.959 284.703 M114.063 284.994 C 107.694 288.480,107.840 287.344,107.825 333.542 C 107.813 372.925,107.873 374.631,109.375 377.735 C 113.573 386.406,126.665 386.463,130.763 377.827 C 132.765 373.609,132.674 293.843,130.663 289.899 C 127.753 284.193,119.813 281.847,114.063 284.994 M189.603 284.766 C 173.875 289.090,162.251 302.495,160.050 318.846 C 157.556 337.381,159.960 362.808,165.065 371.875 C 182.105 402.141,228.252 396.755,238.694 363.281 C 240.412 357.776,241.241 328.437,239.950 318.846 C 236.693 294.645,212.712 278.413,189.603 284.766 M274.274 284.962 C 268.057 288.133,268.386 285.560,268.144 332.905 C 267.951 370.741,268.062 375.350,269.217 377.785 C 273.334 386.461,286.416 386.430,290.625 377.735 C 293.201 372.414,293.016 294.068,290.417 289.534 C 287.265 284.037,280.080 282.002,274.274 284.962 M348.678 285.089 C 338.723 287.937,328.156 296.782,323.861 305.862 C 317.586 319.125,317.571 356.046,323.835 369.167 C 339.726 402.453,389.425 397.849,398.914 362.212 C 400.766 355.257,400.423 317.942,398.449 311.549 C 392.102 290.999,369.682 279.080,348.678 285.089 M46.540 309.291 C 54.896 313.086,56.446 317.979,56.113 339.494 C 55.861 355.771,55.848 355.879,53.690 359.550 C 47.029 370.881,31.115 370.006,25.319 357.989 C 23.712 354.658,22.822 335.074,23.803 324.609 C 25.020 311.624,35.754 304.393,46.540 309.291 M206.069 309.022 C 214.865 312.697,216.016 316.037,216.016 337.891 C 216.016 357.481,215.894 358.111,211.222 362.784 C 203.255 370.751,190.967 368.589,185.279 358.219 C 183.066 354.186,183.376 321.052,185.666 316.797 C 189.853 309.018,198.329 305.788,206.069 309.022 M368.636 310.379 C 370.370 311.526,372.775 314.143,373.980 316.193 L 376.172 319.922 376.172 337.500 C 376.172 357.314,375.896 358.534,370.276 363.611 C 362.844 370.326,351.516 368.406,346.310 359.550 C 343.803 355.286,342.550 326.997,344.551 319.850 C 347.469 309.430,359.847 304.562,368.636 310.379 \" />\n      </g>\n    </svg>\n  );\n};\n\nexport default withIcon(Matrix);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst VPN = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0, 0, 400,400\"\n    >\n      <path d=\"M9.848 1.501 C 4.167 5.247,4.600 -4.346,4.912 110.664 C 5.222 225.221,4.820 216.159,10.531 237.123 C 21.053 275.750,45.261 310.399,77.734 333.311 C 95.250 345.669,194.547 400.000,199.618 400.000 C 204.697 400.000,303.930 345.696,321.484 333.311 C 353.958 310.399,378.166 275.750,388.688 237.123 C 394.396 216.169,393.994 225.173,394.327 110.938 C 394.660 -3.472,395.040 5.015,389.423 1.544 C 385.560 -0.844,13.468 -0.886,9.848 1.501 M82.828 119.539 C 86.641 121.485,86.548 121.303,97.740 148.420 C 102.791 160.656,107.211 170.762,107.563 170.877 C 107.915 170.992,112.408 160.835,117.548 148.304 C 122.688 135.774,127.617 124.438,128.501 123.113 C 134.478 114.157,148.424 118.450,148.435 129.248 C 148.438 132.803,119.115 204.960,115.999 209.065 C 112.226 214.034,104.300 214.273,99.781 209.552 C 97.412 207.078,66.406 132.514,66.406 129.292 C 66.406 121.190,75.489 115.795,82.828 119.539 M222.068 120.186 C 242.904 128.537,246.888 156.793,229.175 170.594 C 222.185 176.039,218.989 176.737,199.072 177.162 L 181.346 177.541 181.103 191.450 C 180.882 204.063,180.709 205.560,179.249 207.514 C 173.834 214.758,165.071 214.933,160.367 207.892 L 158.594 205.238 158.594 165.625 L 158.594 126.012 160.367 123.358 C 163.948 117.998,164.613 117.890,192.578 118.152 C 216.568 118.377,217.759 118.459,222.068 120.186 M267.622 119.879 C 268.629 120.539,278.290 131.803,289.091 144.910 C 299.891 158.017,309.049 168.939,309.442 169.182 C 309.867 169.445,310.156 161.042,310.156 148.452 C 310.156 128.776,310.267 127.064,311.729 124.198 C 315.794 116.231,327.175 116.231,331.239 124.198 C 332.752 127.163,332.813 128.738,332.813 165.347 C 332.813 209.046,332.848 208.796,326.255 211.790 C 318.288 215.408,317.587 214.852,294.075 186.268 L 273.828 161.654 273.438 182.975 C 273.008 206.424,272.799 207.458,267.716 211.246 C 262.821 214.896,255.450 212.886,251.953 206.950 C 249.747 203.204,249.497 128.581,251.678 124.608 C 255.039 118.482,262.234 116.348,267.622 119.879 M181.250 147.266 L 181.250 153.906 197.911 153.906 C 216.798 153.906,217.999 153.528,217.944 147.606 C 217.886 141.339,215.735 140.625,196.926 140.625 L 181.250 140.625 181.250 147.266 \" />\n    </svg>\n  );\n};\n\nexport default withIcon(VPN);\n","import { ReactElement } from 'react';\n\nimport withIcon from '../withIcon';\n\nconst TextToSpeech = (): ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0, 0, 400,400\"\n    >\n      <path d=\"M1.293 1.429 C -0.817 3.760,-0.684 215.545,1.429 217.457 C 3.758 219.565,185.859 219.432,187.770 217.321 C 189.879 214.990,189.746 3.205,187.634 1.293 C 185.304 -0.815,3.203 -0.682,1.293 1.429 M178.125 109.375 L 178.125 207.813 94.531 207.813 L 10.938 207.813 10.938 109.375 L 10.938 10.938 94.531 10.938 L 178.125 10.938 178.125 109.375 M26.563 32.031 C 25.595 32.999,25.000 34.635,25.000 36.328 C 25.000 42.637,19.668 42.188,94.531 42.188 C 159.896 42.187,160.962 42.163,162.500 40.625 C 164.572 38.553,164.572 34.103,162.500 32.031 C 160.043 29.574,29.020 29.574,26.563 32.031 M210.668 35.804 C 208.647 38.037,208.736 67.148,210.770 68.989 C 212.002 70.104,216.267 70.277,247.471 70.477 L 282.778 70.703 284.944 72.868 L 287.109 75.033 287.372 87.907 L 287.634 100.781 275.563 100.781 C 258.836 100.781,259.375 100.303,259.375 115.142 C 259.375 122.822,259.677 126.668,260.352 127.570 C 263.554 131.854,302.863 160.905,305.469 160.914 C 308.069 160.922,347.329 131.903,350.586 127.565 C 351.261 126.666,351.563 122.825,351.563 115.142 C 351.563 100.310,352.091 100.781,335.442 100.781 L 323.438 100.781 323.417 84.961 C 323.381 56.733,314.159 42.141,292.241 35.635 C 285.371 33.595,212.530 33.746,210.668 35.804 M283.875 46.054 C 304.816 48.753,312.451 61.730,312.485 94.682 C 312.504 113.915,311.279 112.500,327.908 112.500 L 339.844 112.500 339.806 116.992 L 339.769 121.484 323.005 134.375 C 313.785 141.465,305.893 147.266,305.469 147.266 C 305.044 147.266,297.153 141.465,287.932 134.375 L 271.168 121.484 271.131 116.992 L 271.094 112.500 283.117 112.500 C 299.981 112.500,298.574 114.572,298.282 90.175 L 298.047 70.584 295.892 67.330 C 294.706 65.540,292.272 63.106,290.481 61.921 L 287.226 59.766 254.160 59.546 L 221.094 59.326 221.094 52.319 L 221.094 45.313 249.805 45.338 C 265.596 45.352,280.927 45.674,283.875 46.054 M28.906 59.922 C 24.947 61.401,23.504 67.154,26.429 69.801 C 28.753 71.904,160.862 71.773,162.770 69.665 C 164.625 67.615,164.436 63.080,162.418 61.254 C 160.799 59.788,32.686 58.511,28.906 59.922 M26.736 90.279 C 24.974 91.513,24.298 96.178,25.598 98.125 C 27.321 100.705,29.288 100.781,94.531 100.781 C 167.946 100.781,164.023 101.142,164.051 94.380 C 164.074 88.735,168.352 89.062,94.531 89.062 C 36.008 89.063,28.275 89.201,26.736 90.279 M27.734 118.902 C 24.373 120.809,23.789 126.407,26.736 128.471 C 29.376 130.320,159.687 130.320,162.326 128.471 C 165.347 126.356,164.675 120.704,161.184 118.867 C 158.768 117.595,29.979 117.630,27.734 118.902 M26.293 149.085 C 24.437 151.135,24.627 155.670,26.645 157.496 C 29.216 159.823,159.847 159.823,162.418 157.496 C 164.536 155.579,164.657 150.780,162.634 148.949 C 160.309 146.846,28.200 146.977,26.293 149.085 M26.563 178.125 C 25.595 179.092,25.000 180.729,25.000 182.422 C 25.000 188.598,22.377 188.281,73.473 188.281 L 118.821 188.281 120.739 186.364 C 121.793 185.309,122.656 183.535,122.656 182.422 C 122.656 181.309,121.793 179.535,120.739 178.480 L 118.821 176.563 73.473 176.563 C 29.167 176.563,28.089 176.598,26.563 178.125 M212.230 182.679 C 210.121 185.010,210.254 396.795,212.366 398.707 C 214.696 400.815,396.797 400.682,398.707 398.571 C 400.817 396.240,400.684 184.455,398.571 182.543 C 396.242 180.435,214.141 180.568,212.230 182.679 M389.063 290.625 L 389.063 389.063 305.469 389.063 L 221.875 389.063 221.875 290.625 L 221.875 192.188 305.469 192.188 L 389.063 192.188 389.063 290.625 M271.230 215.089 L 269.531 216.898 269.531 290.734 L 269.531 364.571 271.339 366.270 C 273.898 368.674,277.583 368.514,279.631 365.910 C 282.185 362.663,282.185 218.587,279.631 215.340 C 277.514 212.649,273.631 212.533,271.230 215.089 M331.307 215.340 C 328.752 218.587,328.752 362.663,331.307 365.910 C 333.423 368.601,337.306 368.717,339.708 366.161 L 341.406 364.352 341.406 290.516 L 341.406 216.679 339.598 214.980 C 337.040 212.576,333.355 212.736,331.307 215.340 M302.138 239.258 C 299.371 241.359,299.219 244.034,299.219 290.559 C 299.219 343.432,299.160 342.969,305.808 342.969 C 311.167 342.969,310.938 345.314,310.938 290.625 C 310.938 242.448,310.904 241.373,309.375 239.844 C 307.612 238.081,304.066 237.793,302.138 239.258 M71.094 255.106 C 45.943 274.578,48.438 271.303,48.438 284.858 C 48.438 299.690,47.909 299.219,64.558 299.219 L 76.563 299.219 76.583 315.039 C 76.619 343.337,86.509 358.770,108.236 364.429 C 115.823 366.405,187.519 366.199,189.332 364.196 C 191.353 361.963,191.264 332.852,189.230 331.011 C 187.998 329.896,183.736 329.723,152.574 329.523 L 117.312 329.297 115.297 327.403 C 113.285 325.513,113.281 325.483,113.281 312.364 L 113.281 299.219 124.895 299.219 C 135.497 299.219,136.689 299.076,138.586 297.584 L 140.665 295.949 140.450 284.140 L 140.234 272.331 118.750 255.704 C 100.159 241.317,96.897 239.078,94.531 239.077 C 92.168 239.077,88.990 241.250,71.094 255.106 M112.109 265.635 L 128.846 278.516 128.876 283.008 L 128.906 287.500 116.883 287.500 C 100.019 287.500,101.426 285.428,101.718 309.825 L 101.953 329.416 104.108 332.670 C 105.294 334.460,107.728 336.894,109.519 338.079 L 112.774 340.234 145.840 340.454 L 178.906 340.674 178.906 347.681 L 178.906 354.688 150.195 354.672 C 110.884 354.651,105.965 353.679,96.958 344.155 C 89.074 335.819,87.540 329.510,87.515 305.318 C 87.496 286.085,88.721 287.500,72.092 287.500 L 60.156 287.500 60.195 283.008 L 60.234 278.516 77.188 265.445 C 86.512 258.256,94.418 252.460,94.757 252.565 C 95.096 252.669,102.904 258.551,112.109 265.635 M241.297 264.775 L 239.453 266.268 239.453 290.625 L 239.453 314.982 241.297 316.475 C 243.689 318.412,247.244 318.381,249.219 316.406 C 250.714 314.911,250.781 313.802,250.781 290.625 C 250.781 267.448,250.714 266.339,249.219 264.844 C 247.244 262.869,243.689 262.838,241.297 264.775 M361.719 264.844 C 360.223 266.339,360.156 267.448,360.156 290.625 C 360.156 313.802,360.223 314.911,361.719 316.406 C 363.693 318.381,367.249 318.412,369.640 316.475 L 371.484 314.982 371.484 290.625 L 371.484 266.268 369.640 264.775 C 367.249 262.838,363.693 262.869,361.719 264.844 \" />\n    </svg>\n  );\n};\n\nexport default withIcon(TextToSpeech);\n","import {\n  Github,\n  Cars,\n  Quantum,\n  MacOs,\n  LinkedIn,\n  Linux,\n  Windows,\n  ARGlasses,\n  Map,\n  Music,\n  Swift,\n  Psychology,\n  Dresscode,\n  Analyze,\n  Terminal,\n  Office,\n  Eyes,\n  MagicMan,\n  Matrix,\n  VPN,\n  TextToSpeech\n} from '../icons';\n\nexport default {\n  personal: [\n    {\n      id: 0,\n      label: 'Name',\n      value: 'Narek Arsenyan'\n    },\n    {\n      id: 1,\n      label: 'Birth Date',\n      value: '30 July 1999'\n    },\n    {\n      id: 2,\n      label: 'Residence',\n      value: 'Yerevan, Armenia'\n    }\n  ],\n  contact: [\n    {\n      id: 0,\n      label: 'Email',\n      type: 'mailto',\n      value: 'narekarsenyan99@gmail.com',\n      rawValue: 'narekarsenyan99@gmail.com'\n    },\n    {\n      id: 1,\n      label: 'Mobile',\n      type: 'tel',\n      value: '+374 95 112 195',\n      rawValue: '+37495112195'\n    },\n    {\n      id: 2,\n      label: 'Mobile 2',\n      type: 'tel',\n      value: '+374 99 112 195',\n      rawValue: '+37499112195'\n    }\n  ],\n  references: [\n    {\n      id: 0,\n      label: 'linkedin',\n      icon: <LinkedIn style={{ fontSize: 32 }} />,\n      linkValue: 'https://www.linkedin.com/in/nmac99',\n      value: 'https://www.linkedin.com/in/nmac99'\n    },\n    {\n      id: 1,\n      label: 'github',\n      icon: <Github style={{ fontSize: 32 }} />,\n      linkValue: 'https://github.com/nmac99',\n      value: 'https://github.com/nmac99'\n    }\n  ],\n  hobbies: [\n    {\n      id: 0,\n      label: 'cars',\n      icon: <Cars style={{ fontSize: 32 }} />,\n      linkValue: 'https://www.vw.com/en.html',\n      value: 'Driving Cars'\n    },\n    {\n      id: 1,\n      label: 'quantumphysics',\n      icon: <Quantum style={{ fontSize: 32 }} />,\n      linkValue: 'https://www.newscientist.com/definition/quantum-physics/',\n      value: 'Quantum Physics'\n    },\n    {\n      id: 2,\n      label: 'swift',\n      icon: <Swift style={{ fontSize: 32 }} />,\n      linkValue: 'https://developer.apple.com/swift/',\n      value: 'Programming'\n    },\n    {\n      id: 3,\n      label: 'psychology',\n      icon: <Psychology style={{ fontSize: 32 }} />,\n      linkValue: 'https://www.verywellmind.com/',\n      value: 'Psychology'\n    },\n    {\n      id: 4,\n      label: 'dresscode',\n      icon: <Dresscode style={{ fontSize: 32 }} />,\n      linkValue: 'https://i.gifer.com/PTho.gif',\n      value: 'Dress code'\n    },\n    {\n      id: 2,\n      label: 'analyze',\n      icon: <Analyze style={{ fontSize: 32 }} />,\n      linkValue: 'https://c.tenor.com/q0Cj0U0_4-0AAAAC/genius-smart.gif',\n      value: 'Analysis'\n    }\n  ],\n  aboutMe:\n    'My name is Narek. I am 22 years old boy who likes to do some cool stuff. Yup, coding is cool. However, currently I am only a student at NPUA. I do like to code and want to find community where I can apply to continually expand related knowledge and skills. There are many things that attract me in this reality. Check out my hobbies!',\n  skills: {\n    os: [\n      {\n        id: 0,\n        label: 'macos',\n        icon: <MacOs style={{ fontSize: 32 }} />,\n        linkValue: 'https://www.apple.com/am/macos',\n        value: 'Mac OS'\n      },\n      {\n        id: 1,\n        label: 'linux',\n        icon: <Linux style={{ fontSize: 32 }} />,\n        linkValue:\n          'https://thumbs.gfycat.com/BigheartedMassiveEastsiberianlaika-size_restricted.gif',\n        value: 'Linux'\n      },\n      {\n        id: 2,\n        label: 'windows',\n        icon: <Windows style={{ fontSize: 32 }} />,\n        linkValue: 'https://www.microsoft.com/en-us/windows',\n        value: 'Windows'\n      },\n      {\n        id: 3,\n        label: 'terminal',\n        icon: <Terminal style={{ fontSize: 32 }} />,\n        linkValue: 'https://hackertyper.net/',\n        value: 'Terminal'\n      },\n      {\n        id: 4,\n        label: 'msoffice',\n        icon: <Office style={{ fontSize: 32 }} />,\n        linkValue: 'https://en.wikipedia.org/wiki/Microsoft_Office',\n        value: 'MS Office'\n      }\n    ],\n    swift: [\n      {\n        id: 0,\n        percent: 100,\n        key: 'foundation',\n        name: 'Foundation'\n      },\n      {\n        id: 1,\n        percent: 75,\n        key: 'uikit',\n        name: 'UIKit'\n      },\n      {\n        id: 2,\n        percent: 50,\n        key: 'swiftui',\n        name: 'SwiftUI'\n      },\n      {\n        id: 3,\n        percent: 45,\n        key: 'mapkit',\n        name: 'MapKit'\n      },\n      {\n        id: 4,\n        percent: 60,\n        key: 'realitykit',\n        name: 'RealityKit'\n      },\n      {\n        id: 5,\n        percent: 30,\n        key: 'spritekit',\n        name: 'SpriteKit'\n      },\n      {\n        id: 6,\n        percent: 30,\n        key: 'avkit',\n        name: 'AVKit'\n      },\n      {\n        id: 7,\n        percent: 70,\n        key: 'arkit',\n        name: 'ARKit'\n      }\n    ]\n  },\n  experience: [\n    {\n      id: 0,\n      name: 'AR Glasses',\n      projectLink: 'https://github.com/NMac99/Glasses',\n      icon: <ARGlasses style={{ fontSize: 64 }} />\n    },\n    {\n      id: 1,\n      name: 'Directions',\n      projectLink: 'https://github.com/NMac99/Direction',\n      icon: <Map style={{ fontSize: 64 }} />\n    },\n    {\n      id: 2,\n      name: 'Music',\n      projectLink: 'https://github.com/NMac99/NM_Music',\n      icon: <Music style={{ fontSize: 64 }} />\n    },\n    {\n      id: 3,\n      name: 'Eyes Tracking',\n      projectLink:\n        'https://github.com/NMac99/Eyes-tracking-with-distance-and-preview',\n      icon: <Eyes style={{ fontSize: 64 }} />\n    },\n    {\n      id: 4,\n      name: 'Magic Man',\n      projectLink: 'https://github.com/NMac99/Magic-Man',\n      icon: <MagicMan style={{ fontSize: 64 }} />\n    },\n    {\n      id: 5,\n      name: 'Sorting with pairs',\n      projectLink:\n        'https://github.com/NMac99/Sort-Characters-with-swap-two-by-two',\n      icon: <Matrix style={{ fontSize: 64 }} />\n    },\n    {\n      id: 6,\n      name: 'Text to Speech',\n      projectLink: 'https://github.com/NMac99/TextToSpeech',\n      icon: <TextToSpeech style={{ fontSize: 64 }} />\n    },\n    {\n      id: 7,\n      name: 'VPN',\n      projectLink: 'https://github.com/NMac99/VPNTemplete',\n      icon: <VPN style={{ fontSize: 64 }} />\n    }\n  ],\n  education: [\n    {\n      id: 0,\n      order: 0,\n      entityTitle: 'College',\n      entityDescription: 'YSCI, Mechatronics',\n      startDate: new Date(2014, 8),\n      endDate: new Date(2018, 6),\n      extra: [\n        {\n          id: 0,\n          gap: true\n        },\n        {\n          id: 1,\n          year: 2017,\n          description:\n            'Created billiard playing manipulator and presented on DigiTec Expo'\n        },\n        {\n          id: 2,\n          year: 2018,\n          description: 'Created smart recycle bin and presented on DigiTec Expo'\n        }\n      ]\n    },\n    {\n      id: 1,\n      order: 1,\n      entityTitle: 'Army',\n      entityDescription: 'Driver',\n      startDate: new Date(2018, 6),\n      endDate: new Date(2020, 6)\n    },\n    {\n      id: 2,\n      order: 2,\n      entityTitle: 'University',\n      entityDescription: 'NPUA, Computer Science',\n      startDate: new Date(2020, 8),\n      endDate: new Date(2023, 6),\n      extra: [\n        {\n          id: 0,\n          year: 2020,\n          description:\n            'Created Laser cutting machine-tool and presented in YSCI'\n        },\n        {\n          id: 1,\n          year: 2020,\n          description: 'iOS course in Sunny School'\n        },\n        {\n          id: 2,\n          gap: true\n        }\n      ]\n    }\n  ],\n  languages: [\n    {\n      id: 0,\n      label: 'Armenian',\n      spokenProgress: 95,\n      writtenProgress: 85\n    },\n    {\n      id: 1,\n      label: 'Russian',\n      spokenProgress: 80,\n      writtenProgress: 65\n    },\n    {\n      id: 3,\n      label: 'English',\n      spokenProgress: 50,\n      writtenProgress: 40\n    }\n  ],\n  advantages: [\n    {\n      id: 0,\n      value: 'adapt quickly'\n    },\n    {\n      id: 1,\n      value: 'concentrate on the job and pay attention to details'\n    },\n    {\n      id: 2,\n      value: 'am punctual and hardworking'\n    },\n    {\n      id: 3,\n      value: 'like the process of learning'\n    },\n    {\n      id: 4,\n      value: 'always look for better solution'\n    },\n    {\n      id: 5,\n      value: 'am good at googling'\n    }\n  ],\n  tools: [\n    { id: 0, name: 'Xcode', progress: 8 },\n    { id: 1, name: 'Git', progress: 6 },\n    { id: 2, name: 'Reality Composer', progress: 5 },\n    { id: 4, name: 'Zsh', progress: 5 },\n    { id: 5, name: 'Bash', progress: 4 },\n    { id: 3, name: 'JSON', progress: 6 }\n  ]\n};\n","import styled from 'styled-components';\nimport { Space } from 'antd';\nimport { Profile } from 'icons';\n\nexport const ProgressWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  position: relative;\n`;\n\nexport const ProfileImg = styled(Profile)<{ size: number }>`\n  position: absolute;\n  top: calc(53% - ${props => props.size / 2}px);\n  bottom: 0;\n  left: calc(50% - ${props => props.size / 2}px);\n  right: 0;\n  font-size: ${props => props.size}px;\n`;\n\nexport const ReferenceWrapper = styled(Space)`\n  margin-top: 30px;\n`;\n","import styled from 'styled-components';\n\nexport const CardWrapper = styled.div`\n  margin-top: 60px;\n`;\n\nexport const CardHeader = styled.div`\n  font-size: 24px;\n  line-height: 28px;\n  font-weight: bold;\n  text-transform: uppercase;\n  border-bottom: 2px solid var(--color-1);\n  margin-bottom: 20px;\n  color: var(--color-1);\n`;\n","import { FC, ReactElement, ReactNode } from 'react';\n\nimport { CardHeader, CardWrapper } from './style';\n\ntype Props = {\n  title: string;\n  children?: ReactNode;\n};\n\nconst SidebarCard: FC<Props> = ({ title, children }): ReactElement => {\n  return (\n    <CardWrapper>\n      <CardHeader>{title.toUpperCase()}</CardHeader>\n      {children}\n    </CardWrapper>\n  );\n};\n\nexport default SidebarCard;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.a<{ $inverted: boolean; $uppercase: boolean }>`\n  display: flex;\n  align-items: center;\n  color: var(--color-${props => (props.$inverted ? 'dark-40' : '1')});\n  padding-left: 10px;\n\n  ${props => props.$uppercase && `text-transform: uppercase;`}\n\n  svg {\n    fill: var(\n      ${props => (props.$inverted ? '--color-1-dark-40' : '--color-1')}\n    );\n  }\n\n  &:hover {\n    color: var(--color-${props => (props.$inverted ? 3 : 2)});\n    svg {\n      fill: var(--color-${props => (props.$inverted ? 3 : 2)});\n    }\n  }\n`;\n","import { FC, ReactElement } from 'react';\n\nimport { Wrapper } from './style';\n\ntype Props = {\n  icon?: ReactElement;\n  linkValue?: string;\n  value?: string;\n  inverted?: boolean;\n  uppercase?: boolean;\n};\n\nconst ReferenceLink: FC<Props> = ({\n  icon,\n  linkValue,\n  value,\n  inverted = false,\n  uppercase = false\n}): ReactElement => {\n  return (\n    <Wrapper\n      href={linkValue}\n      target=\"_blank\"\n      $inverted={inverted}\n      $uppercase={uppercase}\n    >\n      <div style={{ display: 'inline-block', lineHeight: 0 }}>{icon}</div>\n      <div style={{ marginLeft: inverted ? 20 : 12 }}>{value}</div>\n    </Wrapper>\n  );\n};\n\nexport default ReferenceLink;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  min-height: 40px;\n  color: var(--color-1);\n  padding: 12px 0;\n`;\n\nexport const ProgressBar = styled.div<{\n  $inversed?: boolean;\n}>`\n  display: flex;\n  flex: 1;\n  height: 20px;\n  min-width: 100px;\n  background-color: rgba(255, 255, 255, 0.2);\n  overflow: hidden;\n  ${props =>\n    props.$inversed\n      ? `\n      justify-content: flex-end;\n    \n    &, & ${PureProgress} {\n      border-top-left-radius: 4px;\n      border-bottom-left-radius: 4px;\n    }\n    \n    & ${PureProgress} {\n      background-color: var(--color-3-dark);\n    }\n  `\n      : `\n      &, & ${PureProgress} {\n        border-top-right-radius: 4px;\n        border-bottom-right-radius: 4px;\n      }\n    \n      & ${PureProgress} {\n        background-color: var(--color-3-light);\n      }\n  `}\n`;\n\nexport const PureProgress = styled.div<{\n  progress: number;\n}>`\n  width: ${props => props.progress}%;\n  height: 100%;\n`;\n","import React, { FC, ReactElement } from 'react';\nimport { Row, Col } from 'antd';\n\nimport { Wrapper, ProgressBar, PureProgress } from './style';\n\ntype Props = {\n  label: string;\n  spokenProgress: number;\n  writtenProgress: number;\n};\n\nconst LanguageBar: FC<Props> = ({\n  label,\n  spokenProgress,\n  writtenProgress\n}): ReactElement => {\n  return (\n    <Wrapper>\n      <Row\n        wrap={false}\n        style={{\n          textAlign: 'center',\n          fontSize: 14,\n          fontWeight: 'bold',\n          paddingBottom: 6\n        }}\n      >\n        <Col span={24}>{label.toUpperCase()}</Col>\n      </Row>\n      <Row wrap={false} gutter={10} align=\"middle\" style={{ fontSize: 12 }}>\n        <Col flex=\"none\">SPOKEN</Col>\n        <Col flex=\"auto\">\n          <Row wrap={false} align=\"middle\">\n            <Col span={12}>\n              <ProgressBar $inversed>\n                <PureProgress progress={spokenProgress} />\n              </ProgressBar>\n            </Col>\n            <Col span={12}>\n              <ProgressBar>\n                <PureProgress progress={writtenProgress} />\n              </ProgressBar>\n            </Col>\n          </Row>\n        </Col>\n        <Col flex=\"none\">WRITTEN</Col>\n      </Row>\n    </Wrapper>\n  );\n};\n\nexport default LanguageBar;\n","import { FC, ReactElement, useEffect, useState } from 'react';\nimport { Layout, Progress, Row, Col, Space, Menu } from 'antd';\nimport USER from 'constants/user';\nimport {\n  CaretLeftOutlined,\n  CaretRightOutlined,\n  MailFilled,\n  InfoCircleFilled,\n  SignalFilled,\n  StarFilled\n} from '@ant-design/icons';\n\nimport { ProfileImg, ProgressWrapper, ReferenceWrapper } from './style';\nimport SidebarCard from 'components/SidebarCard';\nimport ReferenceLink from 'components/ReferenceLink';\nimport LanguageBar from 'components/LanguageBar';\n\nconst { Sider } = Layout;\n\ntype Props = {};\n\nconst Sidebar: FC<Props> = (): ReactElement => {\n  const [collapsed, setCollapsed] = useState(false);\n\n  useEffect(() => {\n    document\n      .getElementById('root')\n      ?.classList[collapsed ? 'add' : 'remove']('collapsed');\n  }, [collapsed]);\n\n  return (\n    <Sider\n      trigger={null}\n      collapsible\n      collapsed={collapsed}\n      style={{\n        padding: '20px 20px 10px',\n        backgroundColor: 'var(--color-5)'\n      }}\n      width=\"33%\"\n    >\n      <Menu style={{ background: 'none' }} selectable={false} theme=\"dark\">\n        <Menu.Item\n          key=\"0\"\n          onClick={() => {\n            setCollapsed(val => !val);\n          }}\n          style={{\n            background: 'transparent',\n            color: 'var(--color-1)',\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignItems: 'center'\n          }}\n          icon={\n            collapsed ? (\n              <CaretRightOutlined />\n            ) : (\n              <CaretLeftOutlined style={{ fontSize: 24 }} />\n            )\n          }\n        />\n        <Menu.Item\n          key=\"1\"\n          {...(collapsed && {\n            icon: (\n              <ProfileImg\n                size={32}\n                style={{ display: 'flex', justifyContent: 'center' }}\n              />\n            )\n          })}\n          style={{ height: 'unset' }}\n        >\n          <ProgressWrapper>\n            <Progress\n              type=\"circle\"\n              percent={22}\n              width={200}\n              strokeColor=\"var(--color-2)\"\n              trailColor=\"var(--color-1)\"\n              strokeWidth={5}\n              showInfo={false}\n            />\n            <ProfileImg size={170} />\n          </ProgressWrapper>\n        </Menu.Item>\n        <Menu.Item\n          key=\"2\"\n          style={{ height: 'unset' }}\n          {...(collapsed && {\n            icon: <InfoCircleFilled style={{ color: 'var(--color-1)' }} />\n          })}\n        >\n          <SidebarCard title=\"Personal\">\n            {USER.personal.map(item => (\n              <Row\n                key={item.id}\n                wrap={false}\n                style={{\n                  color: 'var(--color-1)',\n                  borderBottom: '1px solid var(--color-1)',\n                  opacity: 0.8\n                }}\n              >\n                <Col span={12} style={{ fontSize: '16px' }}>\n                  {item.label.toUpperCase()}\n                </Col>\n                <Col span={12} style={{ fontSize: '14px', opacity: 0.7 }}>\n                  {item.value.toUpperCase()}\n                </Col>\n              </Row>\n            ))}\n          </SidebarCard>\n        </Menu.Item>\n        <Menu.Item\n          key=\"3\"\n          style={{ height: 'unset' }}\n          {...(collapsed && {\n            icon: <MailFilled style={{ color: 'var(--color-1)' }} />\n          })}\n        >\n          <SidebarCard title=\"Contact\">\n            {USER.contact.map(item => (\n              <Row\n                key={item.id}\n                wrap={false}\n                style={{\n                  color: 'var(--color-1)',\n                  borderBottom: '1px solid var(--color-1)',\n                  opacity: 0.8\n                }}\n              >\n                <Col span={8} style={{ fontSize: '16px' }}>\n                  {item.label.toUpperCase()}\n                </Col>\n                <Col\n                  span={16}\n                  style={{\n                    fontSize: '14px',\n                    opacity: 0.7,\n                    ...(item.id === 0 && { fontSize: '13px' })\n                  }}\n                >\n                  <a href={`${item.type}:${item.rawValue}`}>\n                    {item.value.toUpperCase()}\n                  </a>\n                </Col>\n              </Row>\n            ))}\n          </SidebarCard>\n          <ReferenceWrapper size=\"middle\" direction=\"vertical\">\n            {USER.references.map(ref => (\n              <ReferenceLink key={ref.id} {...ref} />\n            ))}\n          </ReferenceWrapper>\n        </Menu.Item>\n        <Menu.Item\n          key=\"4\"\n          style={{ height: 'unset' }}\n          {...(collapsed && {\n            icon: <SignalFilled style={{ color: 'var(--color-1)' }} />\n          })}\n        >\n          <SidebarCard title=\"Language\">\n            {USER.languages.map(lang => (\n              <LanguageBar key={lang.id} {...lang} />\n            ))}\n          </SidebarCard>\n        </Menu.Item>\n        <Menu.Item\n          key=\"5\"\n          style={{ height: 'unset' }}\n          {...(collapsed && {\n            icon: <StarFilled style={{ color: 'var(--color-1)' }} />\n          })}\n        >\n          <SidebarCard title=\"Hobbies\">\n            <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n              {USER.hobbies.map(hobby => (\n                <ReferenceLink key={hobby.id} {...hobby} uppercase />\n              ))}\n            </Space>\n          </SidebarCard>\n        </Menu.Item>\n        <Menu.Item\n          key=\"999999\"\n          onClick={() => {\n            setCollapsed(val => !val);\n          }}\n          style={{\n            background: 'transparent',\n            color: 'var(--color-1)',\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignItems: 'center'\n          }}\n          icon={\n            collapsed ? (\n              <CaretRightOutlined />\n            ) : (\n              <CaretLeftOutlined style={{ fontSize: 24 }} />\n            )\n          }\n        />\n      </Menu>\n    </Sider>\n  );\n};\n\nexport default Sidebar;\n","import styled from 'styled-components';\n\nexport const CardWrapper = styled.div`\n  width: 100%;\n  background: linear-gradient(var(--color-1), var(--color-1-dark-10));\n  padding: 20px;\n  border-radius: 6px;\n  margin-bottom: 30px;\n\n  &:last-child {\n    margin-bottom: unset;\n  }\n`;\n\nexport const CardHeader = styled.div`\n  display: inline-block;\n  font-size: 24px;\n  line-height: 28px;\n  font-weight: bold;\n  text-transform: uppercase;\n  border-bottom: 2px solid var(--color-2);\n  padding-left: 20px;\n  padding-right: 10%;\n  margin-bottom: 10px;\n  color: var(--color-2);\n`;\n","import { CSSProperties, FC, ReactElement, ReactNode } from 'react';\n\nimport { CardHeader, CardWrapper } from './style';\n\ntype Props = {\n  title: string;\n  children?: ReactNode;\n  style?: CSSProperties;\n};\n\nconst MainbarCard: FC<Props> = ({ title, children, style }): ReactElement => {\n  return (\n    <CardWrapper style={style || {}}>\n      <CardHeader>{title.toUpperCase()}</CardHeader>\n      <br />\n      {children}\n    </CardWrapper>\n  );\n};\n\nexport default MainbarCard;\n","import { FC, ReactElement, useEffect, useRef } from 'react';\nimport Gradient from 'javascript-color-gradient';\n\ntype Props = {\n  data: Array<{\n    id: number;\n    percent: number;\n    key: string;\n    name: string;\n  }>;\n};\n\nconst PieChart: FC<Props> = ({ data }): ReactElement => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current as HTMLCanvasElement;\n    const ctx = canvas.getContext('2d');\n\n    if (ctx) {\n      const globalStyles = window.getComputedStyle(document.body);\n      const colorGradient = new Gradient();\n      colorGradient.setGradient(\n        globalStyles.getPropertyValue('--color-4'),\n        globalStyles.getPropertyValue('--color-3')\n      );\n      colorGradient.setMidpoint(data.length);\n      const angleStep = (2 * Math.PI) / data.length;\n      let previousAngle = -Math.PI / 2;\n      const sortedData = [...data].sort(\n        (item1, item2) => item1.percent - item2.percent\n      );\n\n      for (let i = 0; i < data.length; i++) {\n        const deltaX = Math.cos(previousAngle + angleStep / 2) * 5;\n        const deltaY = Math.sin(previousAngle + angleStep / 2) * 5;\n        const segmentStartX = canvas.width / 2 + deltaX;\n\n        const segmentStartY = canvas.height / 2 + deltaY;\n        ctx.beginPath();\n        const radius = ((canvas.width / 3 - 5) * data[i].percent) / 100;\n        const positionInSortedData = sortedData.findIndex(\n          item => item.id === data[i].id\n        );\n\n        ctx.arc(\n          segmentStartX,\n          segmentStartY,\n          radius,\n          previousAngle,\n          previousAngle + angleStep\n        );\n        ctx.lineTo(segmentStartX, segmentStartY);\n        ctx.fillStyle = colorGradient.getColor(positionInSortedData + 1);\n        ctx.fill();\n\n        // ATTENTION text section\n\n        setTimeout(() => {\n          ctx.fillStyle = colorGradient.getColor(positionInSortedData + 1);\n          ctx.font = 'bold 14px quicksand';\n          const textMetrics = ctx.measureText(data[i].name);\n          ctx.fillText(\n            data[i].name,\n            segmentStartX +\n              (radius * deltaX) / 5 +\n              (deltaX > 0 ? 10 : -10 - textMetrics.width),\n            segmentStartY + (radius * deltaY) / 5 + (deltaY > 0 ? 15 : -15)\n          );\n        });\n        previousAngle += angleStep;\n\n        // const Links:  = []; // Links information\n        // let hoverLink = ''; // Href of the link which cursor points at\n        // ctx.fillStyle = '#0000ff'; // Default blue link color\n        // ctx.font = '15px Courier New'; // Monospace font for links\n        // ctx.textBaseline = 'top'; // Makes left top point a start point for rendering text\n        //\n        // // Draw the link\n        // const drawLink = (x, y, href, title) => {\n        //   const linkTitle = title,\n        //     linkX = x,\n        //     linkY = y,\n        //     linkWidth = ctx.measureText(linkTitle).width,\n        //     linkHeight = parseInt(ctx.font); // Get lineheight out of fontsize\n        //\n        //   // Draw the link\n        //   ctx.fillText(linkTitle, linkX, linkY);\n        //\n        //   // Underline the link (you can delete this block)\n        //   ctx.beginPath();\n        //   ctx.moveTo(linkX, linkY + linkHeight);\n        //   ctx.lineTo(linkX + linkWidth, linkY + linkHeight);\n        //   ctx.lineWidth = 1;\n        //   ctx.strokeStyle = '#0000ff';\n        //   ctx.stroke();\n        //\n        //   // Add mouse listeners\n        //   canvas.addEventListener('mousemove', on_mousemove, false);\n        //   canvas.addEventListener('click', on_click, false);\n        //\n        //   // Add link params to array\n        //   Links.push(\n        //     x + ';' + y + ';' + linkWidth + ';' + linkHeight + ';' + href\n        //   );\n        // };\n        //\n        // // Link hover\n        // function on_mousemove(ev) {\n        //   let x, y;\n        //\n        //   // Get the mouse position relative to the canvas element\n        //   if (ev.layerX || ev.layerX == 0) {\n        //     // For Firefox\n        //     x = ev.layerX;\n        //     y = ev.layerY;\n        //   }\n        //\n        //   // Link hover\n        //   for (let i = Links.length - 1; i >= 0; i--) {\n        //     let params = [];\n        //\n        //     // Get link params back from array\n        //     params = Links[i].split(';');\n        //\n        //     const linkX = parseInt(params[0]),\n        //       linkY = parseInt(params[1]),\n        //       linkWidth = parseInt(params[2]),\n        //       linkHeight = parseInt(params[3]),\n        //       linkHref = params[4];\n        //\n        //     // Check if cursor is in the link area\n        //     if (\n        //       x >= linkX &&\n        //       x <= linkX + linkWidth &&\n        //       y >= linkY &&\n        //       y <= linkY + linkHeight\n        //     ) {\n        //       document.body.style.cursor = 'pointer';\n        //       hoverLink = linkHref;\n        //       break;\n        //     } else {\n        //       document.body.style.cursor = '';\n        //       hoverLink = '';\n        //     }\n        //   }\n        // }\n        //\n        // // Link click\n        // function on_click(e) {\n        //   if (hoverLink) {\n        //     window.open(hoverLink); // Use this to open in new tab\n        //     //window.location = hoverLink; // Use this to open in current window\n        //   }\n        // }\n        //\n        // // Ready for use ! You are welcome !\n        // drawLink(95, 93, 'http://www.facebook.com/', 'Me at facebook');\n        // drawLink(95, 110, 'http://plus.google.com/', 'Me at G+');\n      }\n    }\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={450}\n      height={350}\n      style={{ marginTop: -20, marginBottom: -50, marginLeft: '-20%' }}\n    />\n  );\n};\n\nexport default PieChart;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.a`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-weight: bold;\n  letter-spacing: 1px;\n  color: var(--color-3);\n  padding-left: 10px;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n\n  & span,\n  div {\n    transition: font-size 0.3s ease;\n  }\n\n  & > div {\n    font-size: 14px;\n    margin-top: 5px;\n    text-transform: uppercase;\n  }\n\n  svg {\n    fill: var(--color-3);\n  }\n\n  &:hover {\n    color: var(--color-4);\n\n    & span {\n      font-size: 80px !important;\n    }\n\n    & > div {\n      font-size: 16px;\n    }\n    svg {\n      fill: var(--color-4);\n    }\n  }\n`;\n","import { FC, ReactElement } from 'react';\n\nimport { Wrapper } from './style';\n\ntype Props = {\n  icon?: ReactElement;\n  projectLink?: string;\n  name?: string;\n};\n\nconst ProjectLink: FC<Props> = ({ icon, projectLink, name }): ReactElement => {\n  return (\n    <Wrapper href={projectLink} target=\"_blank\">\n      {icon}\n      <div style={{ marginTop: 10 }}>{name}</div>\n    </Wrapper>\n  );\n};\n\nexport default ProjectLink;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  gap: 20px;\n  min-height: 30px;\n  font-size: 12px;\n`;\n","import React, { FC, ReactElement } from 'react';\nimport { Rate } from 'antd';\n\nimport { Wrapper } from './style';\n\ntype Props = {\n  name: string;\n  progress: number;\n};\n\nconst ToolExperience: FC<Props> = ({ name, progress }): ReactElement => {\n  return (\n    <Wrapper>\n      {name.toUpperCase()}\n      <Rate\n        count={10}\n        defaultValue={progress}\n        character=\"•\"\n        style={{\n          fontSize: 50,\n          lineHeight: '18px',\n          whiteSpace: 'nowrap',\n          color: 'var(--color-3)'\n        }}\n        disabled\n      />\n    </Wrapper>\n  );\n};\n\nexport default ToolExperience;\n","import styled from 'styled-components';\n\nexport const Container = styled.div``;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: flex-end;\n`;\n\nexport const TimelineSnippetStamp = styled.div`\n  font-size: 12px;\n  font-weight: bold;\n  line-height: 18px;\n  margin-left: -13px;\n`;\n\nexport const TimelineFromNow = styled.div`\n  width: 20%;\n  position: relative;\n  opacity: 0.5;\n  margin-bottom: 18px;\n`;\n\nexport const TimelineFromNowStamp = styled.div`\n  position: absolute;\n  top: -30px;\n  left: -16px;\n\n  & > div > div {\n    position: absolute;\n    width: 2px;\n    height: 8px;\n    left: 50%;\n    background-color: inherit;\n    bottom: -5px;\n    opacity: 0.5;\n  }\n`;\n\nexport const SnippetTitle = styled.div`\n  text-transform: uppercase;\n  color: var(--color-5);\n  font-weight: bold;\n  line-height: 12px;\n`;\n\nexport const SnippetDescription = styled.span<{ color: string }>`\n  line-height: 12px;\n  display: inline-block;\n  position: relative;\n  font-weight: bold;\n  &::after {\n    content: '';\n    position: absolute;\n    left: 50%;\n    bottom: -41px;\n    width: 1px;\n    height: 35px;\n    background-color: ${props => props.color};\n  }\n`;\n\nexport const SnippetData = styled.div`\n  margin: 0 20px 32px;\n`;\n\nexport const TimestampVacancy = styled.div<{ color: string; opacity: number }>`\n  position: relative;\n  padding-left: 24px;\n  padding-bottom: 10px;\n\n  &::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    width: 10px;\n    background-color: ${props => props.color};\n    opacity: ${props => props.opacity};\n    filter: grayscale(1);\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: 10px;\n    top: 10px;\n    width: 8px;\n    height: 1px;\n    background-color: ${props => props.color};\n    opacity: ${props => props.opacity};\n    filter: grayscale(1);\n  }\n`;\n","import { FC, ReactElement, useEffect, useRef, useState } from 'react';\nimport USER from 'constants/user';\nimport Gradient from 'javascript-color-gradient';\n\nimport {\n  TimelineFromNow,\n  TimelineFromNowStamp,\n  TimelineSnippetStamp,\n  Wrapper,\n  SnippetTitle,\n  SnippetDescription,\n  SnippetData,\n  Container,\n  TimestampVacancy\n} from './style';\n\ntype Props = {};\n\nconst monthDiff = (dateFrom: Date, dateTo: Date): number => {\n  return (\n    dateTo.getMonth() -\n    dateFrom.getMonth() +\n    12 * (dateTo.getFullYear() - dateFrom.getFullYear())\n  );\n};\n\nconst Timeline: FC<Props> = (): ReactElement => {\n  const [timelineMaxValue, setTimelineMaxValue] = useState<number>(0);\n  const colors = useRef<string[]>([]);\n\n  useEffect(() => {\n    const timelineLengthByMonths = USER.education.reduce((prev, cur) => {\n      const diff = monthDiff(cur.startDate, cur.endDate);\n\n      return prev + diff;\n    }, 0);\n\n    /* eslint-disable */\n\n    const globalStyles = window.getComputedStyle(document.body);\n    const colorGradient = new Gradient();\n    colorGradient.setGradient(\n      globalStyles.getPropertyValue('--color-4'),\n      globalStyles.getPropertyValue('--color-3')\n    );\n    colorGradient.setMidpoint(USER.education.length);\n    colors.current = colorGradient.getArray();\n\n    setTimelineMaxValue(timelineLengthByMonths);\n  }, []);\n\n  return (\n    <Container>\n      <Wrapper>\n        {USER.education.map((entity, id, array) => (\n          <div\n            key={entity.id}\n            style={{\n              width: `${Math.round(\n                (monthDiff(entity.startDate, entity.endDate) /\n                  timelineMaxValue) *\n                  100\n              )}%`,\n              color: colors.current[entity.id]\n            }}\n          >\n            <SnippetData\n              {...(id === array.length - 1 && {\n                style: { whiteSpace: 'nowrap' }\n              })}\n            >\n              <SnippetTitle>{entity.entityTitle}</SnippetTitle>\n              <SnippetDescription color={colors.current[entity.id]}>\n                {entity.entityDescription}\n              </SnippetDescription>\n            </SnippetData>\n            <div\n              style={{\n                width: `100%`,\n                backgroundColor: colors.current[entity.id],\n                height: 20 * (id + 1)\n              }}\n            />\n            <TimelineSnippetStamp>\n              {entity.startDate.getFullYear()}\n            </TimelineSnippetStamp>\n          </div>\n        ))}\n        <TimelineFromNow\n          style={{\n            backgroundColor: colors.current[colors.current.length - 1],\n            color: colors.current[colors.current.length - 1],\n            height: 20 * colors.current.length\n          }}\n        >\n          <TimelineFromNowStamp>\n            <div\n              style={{ position: 'relative', fontWeight: 'bold', fontSize: 13 }}\n            >\n              {new Date().getFullYear()}\n              <div\n                style={{\n                  backgroundColor: colors.current[colors.current.length - 1]\n                }}\n              />\n            </div>\n          </TimelineFromNowStamp>\n        </TimelineFromNow>\n      </Wrapper>\n\n      <div style={{ display: 'flex', marginTop: 10 }}>\n        {USER.education.map((entity, id, array) => {\n          return (\n            <div\n              key={entity.id}\n              style={{\n                display: 'flex',\n                width: `${Math.round(\n                  (monthDiff(entity.startDate, entity.endDate) /\n                    timelineMaxValue) *\n                    90 +\n                    (id === array.length - 1 ? 20 : 0)\n                )}%`\n              }}\n            >\n              {entity.extra?.map((vacancy, index, array) => (\n                <div\n                  key={vacancy.id}\n                  style={\n                    !vacancy.year\n                      ? { flex: 1 }\n                      : {\n                          width: `${\n                            (12 / monthDiff(entity.startDate, entity.endDate)) *\n                            100\n                          }%`,\n                          height: 24,\n                          background: colors.current[entity.id],\n                          filter: 'grayscale(1)',\n                          opacity: (index + 1) / array.length\n                        }\n                  }\n                />\n              ))}\n            </div>\n          );\n        })}\n      </div>\n      <div style={{ display: 'flex', marginTop: 48 }}>\n        {USER.education.map((entity, id, array) => {\n          return (\n            <div\n              key={entity.id}\n              style={{\n                display: 'flex',\n                width: `${Math.round(\n                  (monthDiff(entity.startDate, entity.endDate) /\n                    timelineMaxValue) *\n                    90 +\n                    (id === array.length - 1 ? 20 : 0)\n                )}%`\n              }}\n            >\n              <div style={{ display: 'flex', flexDirection: 'column' }}>\n                {entity.extra?.map(\n                  (vacancy, index, array) =>\n                    !vacancy.gap && (\n                      <TimestampVacancy\n                        key={vacancy.id}\n                        color={colors.current[entity.id]}\n                        opacity={(index + 1) / array.length}\n                      >\n                        {vacancy.description}\n                      </TimestampVacancy>\n                    )\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </Container>\n  );\n};\n\nexport default Timeline;\n","import { FC, ReactElement } from 'react';\nimport { Layout, Col, Row } from 'antd';\nimport USER from 'constants/user';\n\nimport MainbarCard from 'components/MainbarCard';\nimport ReferenceLink from 'components/ReferenceLink';\nimport PieChart from 'components/PieChart';\nimport ProjectLink from 'components/ProjectLink';\nimport ToolExperience from 'components/ToolExperience';\nimport Timeline from 'components/Timeline';\n\nconst { Content } = Layout;\n\ntype Props = {};\n\nconst Mainbar: FC<Props> = (): ReactElement => {\n  return (\n    <Layout>\n      <Content\n        style={{\n          padding: 20,\n          color: 'var(--color-5)',\n          background: 'var(--color-1)'\n        }}\n      >\n        <MainbarCard title=\"About Me\">\n          <div style={{ textAlign: 'justify' }}>{USER.aboutMe}</div>\n        </MainbarCard>\n        <Row wrap={false} justify=\"space-between\" gutter={20}>\n          <Col span={12} style={{ display: 'flex' }}>\n            <MainbarCard title=\"I ...\">\n              {USER.advantages.map(item => (\n                <Row\n                  key={item.id}\n                  style={{ marginBottom: 10, justifyContent: 'center' }}\n                >\n                  <Col\n                    span={3}\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      textAlign: 'center',\n                      color: 'var(--color-3)',\n                      fontSize: 20\n                    }}\n                  >\n                    ⇒\n                  </Col>\n                  <Col\n                    span={21}\n                    style={{ display: 'flex', alignItems: 'center' }}\n                  >\n                    {item.value}\n                  </Col>\n                </Row>\n              ))}\n            </MainbarCard>\n          </Col>\n          <Col span={12} style={{ marginRight: 10 }}>\n            <MainbarCard title=\"SWIFT\">\n              <PieChart data={USER.skills.swift} />\n            </MainbarCard>\n          </Col>\n        </Row>\n        <MainbarCard title=\"Built from scratch\" style={{ minHeight: 210 }}>\n          <Row\n            style={{ paddingTop: 20, justifyContent: 'center' }}\n            wrap={true}\n            gutter={[0, 40]}\n          >\n            {USER.experience.map(item => (\n              <Col\n                key={item.id}\n                span={8}\n                style={{ height: '120px', position: 'relative' }}\n              >\n                <ProjectLink {...item} />\n              </Col>\n            ))}\n          </Row>\n        </MainbarCard>\n        <MainbarCard title=\"Education\">\n          <Timeline />\n        </MainbarCard>\n        <MainbarCard title=\"Tools &nbsp;& &nbsp;Experience\">\n          <Row wrap={false}>\n            <Col span={10}>\n              <div\n                style={{\n                  marginTop: 30,\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  justifyContent: 'space-evenly',\n                  gap: 30\n                }}\n              >\n                {USER.skills.os.map(item => (\n                  <ReferenceLink key={item.id} {...item} inverted />\n                ))}\n              </div>\n            </Col>\n            <Col span={14}>\n              <div style={{ marginTop: 30 }}>\n                {USER.tools.map(item => (\n                  <ToolExperience key={item.id} {...item} />\n                ))}\n              </div>\n            </Col>\n          </Row>\n        </MainbarCard>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default Mainbar;\n","import { Layout } from 'antd';\nimport React from 'react';\nimport Sidebar from 'elements/Sidebar';\nimport Mainbar from 'elements/Mainbar';\n\nconst Home = () => {\n  return (\n    <Layout>\n      <Sidebar />\n      <Mainbar />\n    </Layout>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Video = styled.video`\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  min-width: 100%;\n  min-height: 100%;\n`;\n\nconst NotFound = () => {\n  return (\n    <Video autoPlay muted loop id=\"notFound\">\n      <source src={`${process.env.PUBLIC_URL}/notfound.mp4`} type=\"video/mp4\" />\n    </Video>\n  );\n};\n\nexport default NotFound;\n","import React, { ReactElement } from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport { Router, Switch, Route } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nimport Home from './pages/home';\nimport NotFound from './pages/NotFound';\n\nconst browserHistory = createBrowserHistory();\n\nconst App = (): ReactElement => {\n  return (\n    <Router history={browserHistory}>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route component={NotFound} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default hot(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'react-hot-loader';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nrequire('antd/dist/antd.css');\nrequire('./index.css');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}